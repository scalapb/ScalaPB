// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package scalapb.docs.person

@SerialVersionUID(0L)
final case class Person(
    name: _root_.scala.Predef.String = "",
    age: _root_.scala.Int = 0,
    addresses: _root_.scala.Seq[scalapb.docs.person.Person.Address] = _root_.scala.Seq.empty,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.Message[Person] with scalapb.lenses.Updatable[Person] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = name
        if (__value != "") {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
        }
      };
      
      {
        val __value = age
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(2, __value)
        }
      };
      addresses.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      __size += unknownFields.serializedSize
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = name
        if (__v != "") {
          _output__.writeString(1, __v)
        }
      };
      {
        val __v = age
        if (__v != 0) {
          _output__.writeInt32(2, __v)
        }
      };
      addresses.foreach { __v =>
        val __m = __v
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      unknownFields.writeTo(_output__)
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scalapb.docs.person.Person = {
      var __name = this.name
      var __age = this.age
      val __addresses = (_root_.scala.collection.immutable.Vector.newBuilder[scalapb.docs.person.Person.Address] ++= this.addresses)
      val _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder(this.unknownFields)
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __name = _input__.readString()
          case 16 =>
            __age = _input__.readInt32()
          case 26 =>
            __addresses += _root_.scalapb.LiteParser.readMessage(_input__, scalapb.docs.person.Person.Address.defaultInstance)
          case tag => _unknownFields__.parseField(tag, _input__)
        }
      }
      scalapb.docs.person.Person(
          name = __name,
          age = __age,
          addresses = __addresses.result(),
          unknownFields = _unknownFields__.result()
      )
    }
    def withName(__v: _root_.scala.Predef.String): Person = copy(name = __v)
    def withAge(__v: _root_.scala.Int): Person = copy(age = __v)
    def clearAddresses = copy(addresses = _root_.scala.Seq.empty)
    def addAddresses(__vs: scalapb.docs.person.Person.Address*): Person = addAllAddresses(__vs)
    def addAllAddresses(__vs: Iterable[scalapb.docs.person.Person.Address]): Person = copy(addresses = addresses ++ __vs)
    def withAddresses(__v: _root_.scala.Seq[scalapb.docs.person.Person.Address]): Person = copy(addresses = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = name
          if (__t != "") __t else null
        }
        case 2 => {
          val __t = age
          if (__t != 0) __t else null
        }
        case 3 => addresses
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PString(name)
        case 2 => _root_.scalapb.descriptors.PInt(age)
        case 3 => _root_.scalapb.descriptors.PRepeated(addresses.iterator.map(_.toPMessage).toVector)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = scalapb.docs.person.Person
}

object Person extends scalapb.GeneratedMessageCompanion[scalapb.docs.person.Person] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scalapb.docs.person.Person] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): scalapb.docs.person.Person = {
    _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    scalapb.docs.person.Person(
      name = __fieldsMap.getOrElse(__fields.get(0), "").asInstanceOf[_root_.scala.Predef.String],
      age = __fieldsMap.getOrElse(__fields.get(1), 0).asInstanceOf[_root_.scala.Int],
      addresses = __fieldsMap.getOrElse(__fields.get(2), Nil).asInstanceOf[_root_.scala.Seq[scalapb.docs.person.Person.Address]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[scalapb.docs.person.Person] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      scalapb.docs.person.Person(
        name = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        age = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Int]).getOrElse(0),
        addresses = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Seq[scalapb.docs.person.Person.Address]]).getOrElse(_root_.scala.Seq.empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = PersonProto.javaDescriptor.getMessageTypes.get(0)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = PersonProto.scalaDescriptor.messages(0)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 3 => __out = scalapb.docs.person.Person.Address
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] =
    Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]](
      _root_.scalapb.docs.person.Person.Address
    )
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = scalapb.docs.person.Person(
    name = "",
    age = 0,
    addresses = _root_.scala.Seq.empty
  )
  sealed trait AddressType extends _root_.scalapb.GeneratedEnum {
    type EnumType = AddressType
    def isHome: _root_.scala.Boolean = false
    def isWork: _root_.scala.Boolean = false
    def companion: _root_.scalapb.GeneratedEnumCompanion[AddressType] = scalapb.docs.person.Person.AddressType
    final def asRecognized: _root_.scala.Option[scalapb.docs.person.Person.AddressType.Recognized] = if (isUnrecognized) _root_.scala.None else _root_.scala.Some(this.asInstanceOf[scalapb.docs.person.Person.AddressType.Recognized])
  }
  
  object AddressType extends _root_.scalapb.GeneratedEnumCompanion[AddressType] {
    sealed trait Recognized extends AddressType
    implicit def enumCompanion: _root_.scalapb.GeneratedEnumCompanion[AddressType] = this
    @SerialVersionUID(0L)
    case object HOME extends AddressType with AddressType.Recognized {
      val value = 0
      val index = 0
      val name = "HOME"
      override def isHome: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object WORK extends AddressType with AddressType.Recognized {
      val value = 1
      val index = 1
      val name = "WORK"
      override def isWork: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    final case class Unrecognized(value: _root_.scala.Int) extends AddressType with _root_.scalapb.UnrecognizedEnum
    
    lazy val values = scala.collection.immutable.Seq(HOME, WORK)
    def fromValue(value: _root_.scala.Int): AddressType = value match {
      case 0 => HOME
      case 1 => WORK
      case __other => Unrecognized(__other)
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.EnumDescriptor = scalapb.docs.person.Person.javaDescriptor.getEnumTypes.get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.EnumDescriptor = scalapb.docs.person.Person.scalaDescriptor.enums(0)
  }
  @SerialVersionUID(0L)
  final case class Address(
      addressType: scalapb.docs.person.Person.AddressType = scalapb.docs.person.Person.AddressType.HOME,
      street: _root_.scala.Predef.String = "",
      city: _root_.scala.Predef.String = "",
      unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
      ) extends scalapb.GeneratedMessage with scalapb.Message[Address] with scalapb.lenses.Updatable[Address] {
      @transient
      private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
      private[this] def __computeSerializedValue(): _root_.scala.Int = {
        var __size = 0
        
        {
          val __value = addressType
          if (__value != scalapb.docs.person.Person.AddressType.HOME) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(1, __value.value)
          }
        };
        
        {
          val __value = street
          if (__value != "") {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, __value)
          }
        };
        
        {
          val __value = city
          if (__value != "") {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, __value)
          }
        };
        __size += unknownFields.serializedSize
        __size
      }
      final override def serializedSize: _root_.scala.Int = {
        var read = __serializedSizeCachedValue
        if (read == 0) {
          read = __computeSerializedValue()
          __serializedSizeCachedValue = read
        }
        read
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        {
          val __v = addressType
          if (__v != scalapb.docs.person.Person.AddressType.HOME) {
            _output__.writeEnum(1, __v.value)
          }
        };
        {
          val __v = street
          if (__v != "") {
            _output__.writeString(2, __v)
          }
        };
        {
          val __v = city
          if (__v != "") {
            _output__.writeString(3, __v)
          }
        };
        unknownFields.writeTo(_output__)
      }
      def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scalapb.docs.person.Person.Address = {
        var __addressType = this.addressType
        var __street = this.street
        var __city = this.city
        val _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder(this.unknownFields)
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 8 =>
              __addressType = scalapb.docs.person.Person.AddressType.fromValue(_input__.readEnum())
            case 18 =>
              __street = _input__.readString()
            case 26 =>
              __city = _input__.readString()
            case tag => _unknownFields__.parseField(tag, _input__)
          }
        }
        scalapb.docs.person.Person.Address(
            addressType = __addressType,
            street = __street,
            city = __city,
            unknownFields = _unknownFields__.result()
        )
      }
      def withAddressType(__v: scalapb.docs.person.Person.AddressType): Address = copy(addressType = __v)
      def withStreet(__v: _root_.scala.Predef.String): Address = copy(street = __v)
      def withCity(__v: _root_.scala.Predef.String): Address = copy(city = __v)
      def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
      def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => {
            val __t = addressType.javaValueDescriptor
            if (__t.getNumber() != 0) __t else null
          }
          case 2 => {
            val __t = street
            if (__t != "") __t else null
          }
          case 3 => {
            val __t = city
            if (__t != "") __t else null
          }
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PEnum(addressType.scalaValueDescriptor)
          case 2 => _root_.scalapb.descriptors.PString(street)
          case 3 => _root_.scalapb.descriptors.PString(city)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion = scalapb.docs.person.Person.Address
  }
  
  object Address extends scalapb.GeneratedMessageCompanion[scalapb.docs.person.Person.Address] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scalapb.docs.person.Person.Address] = this
    def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): scalapb.docs.person.Person.Address = {
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      val __fields = javaDescriptor.getFields
      scalapb.docs.person.Person.Address(
        addressType = scalapb.docs.person.Person.AddressType.fromValue(__fieldsMap.getOrElse(__fields.get(0), scalapb.docs.person.Person.AddressType.HOME.javaValueDescriptor).asInstanceOf[_root_.com.google.protobuf.Descriptors.EnumValueDescriptor].getNumber),
        street = __fieldsMap.getOrElse(__fields.get(1), "").asInstanceOf[_root_.scala.Predef.String],
        city = __fieldsMap.getOrElse(__fields.get(2), "").asInstanceOf[_root_.scala.Predef.String]
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[scalapb.docs.person.Person.Address] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
        scalapb.docs.person.Person.Address(
          addressType = scalapb.docs.person.Person.AddressType.fromValue(__fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scalapb.descriptors.EnumValueDescriptor]).getOrElse(scalapb.docs.person.Person.AddressType.HOME.scalaValueDescriptor).number),
          street = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
          city = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Predef.String]).getOrElse("")
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = scalapb.docs.person.Person.javaDescriptor.getNestedTypes.get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = scalapb.docs.person.Person.scalaDescriptor.nestedMessages(0)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => scalapb.docs.person.Person.AddressType
      }
    }
    lazy val defaultInstance = scalapb.docs.person.Person.Address(
      addressType = scalapb.docs.person.Person.AddressType.HOME,
      street = "",
      city = ""
    )
    implicit class AddressLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scalapb.docs.person.Person.Address]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scalapb.docs.person.Person.Address](_l) {
      def addressType: _root_.scalapb.lenses.Lens[UpperPB, scalapb.docs.person.Person.AddressType] = field(_.addressType)((c_, f_) => c_.copy(addressType = f_))
      def street: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.street)((c_, f_) => c_.copy(street = f_))
      def city: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.city)((c_, f_) => c_.copy(city = f_))
    }
    final val ADDRESS_TYPE_FIELD_NUMBER = 1
    final val STREET_FIELD_NUMBER = 2
    final val CITY_FIELD_NUMBER = 3
    def of(
      addressType: scalapb.docs.person.Person.AddressType,
      street: _root_.scala.Predef.String,
      city: _root_.scala.Predef.String,
      unknownFields: _root_.scalapb.UnknownFieldSet
    ): _root_.scalapb.docs.person.Person.Address = _root_.scalapb.docs.person.Person.Address(
      addressType,
      street,
      city,
      unknownFields
    )
  }
  
  implicit class PersonLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scalapb.docs.person.Person]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scalapb.docs.person.Person](_l) {
    def name: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.name)((c_, f_) => c_.copy(name = f_))
    def age: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.age)((c_, f_) => c_.copy(age = f_))
    def addresses: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[scalapb.docs.person.Person.Address]] = field(_.addresses)((c_, f_) => c_.copy(addresses = f_))
  }
  final val NAME_FIELD_NUMBER = 1
  final val AGE_FIELD_NUMBER = 2
  final val ADDRESSES_FIELD_NUMBER = 3
  def of(
    name: _root_.scala.Predef.String,
    age: _root_.scala.Int,
    addresses: _root_.scala.Seq[scalapb.docs.person.Person.Address],
    unknownFields: _root_.scalapb.UnknownFieldSet
  ): _root_.scalapb.docs.person.Person = _root_.scalapb.docs.person.Person(
    name,
    age,
    addresses,
    unknownFields
  )
}
