package scalapb.perf

import org.openjdk.jmh.annotations.Benchmark
import org.openjdk.jmh.annotations.BenchmarkMode
import org.openjdk.jmh.annotations.Mode
import org.openjdk.jmh.annotations.OutputTimeUnit
import java.util.concurrent.TimeUnit

class ${Message}Test {
    @Benchmark
    @BenchmarkMode(Array(Mode.AverageTime))
    @OutputTimeUnit(TimeUnit.NANOSECONDS)
    def parseJava: Unit = {
        Protos.${Message}.parseFrom(${Message}Test.bytes)
    }

    @Benchmark
    @BenchmarkMode(Array(Mode.AverageTime))
    @OutputTimeUnit(TimeUnit.NANOSECONDS)
    def parseScala: Unit = {
        protos.${Message}.parseFrom(${Message}Test.bytes)
    }

    @Benchmark
    @BenchmarkMode(Array(Mode.AverageTime))
    @OutputTimeUnit(TimeUnit.NANOSECONDS)
    def serializeJava: Unit = {
        ${Message}Test.java.toByteArray
    }

    @Benchmark
    @BenchmarkMode(Array(Mode.AverageTime))
    @OutputTimeUnit(TimeUnit.NANOSECONDS)
    def serializeScala: Unit = {
        ${Message}Test.scala.toByteArray
    }
}

object ${Message}Test {
    val scala = TestCases.make${Message}Scala

    val java = protos.${Message}.toJavaProto(scala)

    val bytes = scala.toByteArray
}