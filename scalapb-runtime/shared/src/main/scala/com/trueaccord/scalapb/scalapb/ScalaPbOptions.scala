// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package com.trueaccord.scalapb.scalapb



/** @param packageName
  *   If set then it overrides the java_package and package.
  * @param flatPackage
  *   If true, the compiler does not append the proto base file name
  *   into the generated package name. If false (the default), the
  *   generated scala package name is the package_name.basename where
  *   basename is the proto file name without the .proto extension.
  * @param import
  *   Adds the following imports at the top of the file (this is meant
  *   to provide implicit TypeMappers)
  * @param preamble
  *   Text to add to the generated scala file.  This can be used only
  *   when single_file is true.
  * @param singleFile
  *   If true, all messages and enums (but not services) will be written
  *   to a single Scala file.
  * @param noPrimitiveWrappers
  *   By default, wrappers defined at
  *   https://github.com/google/protobuf/blob/master/src/google/protobuf/wrappers.proto,
  *   are mapped to an Option[T] where T is a primitive type. When this field
  *   is set to true, we do not perform this transformation.
  * @param primitiveWrappers
  *   DEPRECATED. In ScalaPB &lt;= 0.5.47, it was necessary to explicitly enable
  *   primitive_wrappers. This field remains here for backwards compatibility,
  *   but it has no effect on generated code. It is an error to set both
  *   `primitive_wrappers` and `no_primitive_wrappers`.
  * @param collectionType
  *   Scala type to be used for repeated fields. If unspecified,
  *   `scala.collection.Seq` will be used.
  * @param testOnlyNoJavaConversions
  *   For use in tests only. Inhibit Java conversions even when when generator parameters
  *   request for it.
  */
@SerialVersionUID(0L)
final case class ScalaPbOptions(
    packageName: scala.Option[String] = None,
    flatPackage: scala.Option[Boolean] = None,
    `import`: _root_.scala.collection.Seq[String] = _root_.scala.collection.Seq.empty,
    preamble: _root_.scala.collection.Seq[String] = _root_.scala.collection.Seq.empty,
    singleFile: scala.Option[Boolean] = None,
    noPrimitiveWrappers: scala.Option[Boolean] = None,
    primitiveWrappers: scala.Option[Boolean] = None,
    collectionType: scala.Option[String] = None,
    testOnlyNoJavaConversions: scala.Option[Boolean] = None
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[ScalaPbOptions] with com.trueaccord.lenses.Updatable[ScalaPbOptions] {
    @transient
    private[this] var __serializedSizeCachedValue: Int = 0
    private[this] def __computeSerializedValue(): Int = {
      var __size = 0
      if (packageName.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, packageName.get) }
      if (flatPackage.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(2, flatPackage.get) }
      `import`.foreach(`import` => __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, `import`))
      preamble.foreach(preamble => __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(4, preamble))
      if (singleFile.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(5, singleFile.get) }
      if (noPrimitiveWrappers.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(7, noPrimitiveWrappers.get) }
      if (primitiveWrappers.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(6, primitiveWrappers.get) }
      if (collectionType.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(8, collectionType.get) }
      if (testOnlyNoJavaConversions.isDefined) { __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(100001, testOnlyNoJavaConversions.get) }
      __size
    }
    final override def serializedSize: Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
      packageName.foreach { __v =>
        _output__.writeString(1, __v)
      };
      flatPackage.foreach { __v =>
        _output__.writeBool(2, __v)
      };
      `import`.foreach { __v =>
        _output__.writeString(3, __v)
      };
      preamble.foreach { __v =>
        _output__.writeString(4, __v)
      };
      singleFile.foreach { __v =>
        _output__.writeBool(5, __v)
      };
      primitiveWrappers.foreach { __v =>
        _output__.writeBool(6, __v)
      };
      noPrimitiveWrappers.foreach { __v =>
        _output__.writeBool(7, __v)
      };
      collectionType.foreach { __v =>
        _output__.writeString(8, __v)
      };
      testOnlyNoJavaConversions.foreach { __v =>
        _output__.writeBool(100001, __v)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.trueaccord.scalapb.scalapb.ScalaPbOptions = {
      var __packageName = this.packageName
      var __flatPackage = this.flatPackage
      val __import = (_root_.scala.collection.immutable.Vector.newBuilder[String] ++= this.`import`)
      val __preamble = (_root_.scala.collection.immutable.Vector.newBuilder[String] ++= this.preamble)
      var __singleFile = this.singleFile
      var __noPrimitiveWrappers = this.noPrimitiveWrappers
      var __primitiveWrappers = this.primitiveWrappers
      var __collectionType = this.collectionType
      var __testOnlyNoJavaConversions = this.testOnlyNoJavaConversions
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __packageName = Some(_input__.readString())
          case 16 =>
            __flatPackage = Some(_input__.readBool())
          case 26 =>
            __import += _input__.readString()
          case 34 =>
            __preamble += _input__.readString()
          case 40 =>
            __singleFile = Some(_input__.readBool())
          case 56 =>
            __noPrimitiveWrappers = Some(_input__.readBool())
          case 48 =>
            __primitiveWrappers = Some(_input__.readBool())
          case 66 =>
            __collectionType = Some(_input__.readString())
          case 800008 =>
            __testOnlyNoJavaConversions = Some(_input__.readBool())
          case tag => _input__.skipField(tag)
        }
      }
      com.trueaccord.scalapb.scalapb.ScalaPbOptions(
          packageName = __packageName,
          flatPackage = __flatPackage,
          `import` = __import.result(),
          preamble = __preamble.result(),
          singleFile = __singleFile,
          noPrimitiveWrappers = __noPrimitiveWrappers,
          primitiveWrappers = __primitiveWrappers,
          collectionType = __collectionType,
          testOnlyNoJavaConversions = __testOnlyNoJavaConversions
      )
    }
    def getPackageName: String = packageName.getOrElse("")
    def clearPackageName: ScalaPbOptions = copy(packageName = None)
    def withPackageName(__v: String): ScalaPbOptions = copy(packageName = Some(__v))
    def getFlatPackage: Boolean = flatPackage.getOrElse(false)
    def clearFlatPackage: ScalaPbOptions = copy(flatPackage = None)
    def withFlatPackage(__v: Boolean): ScalaPbOptions = copy(flatPackage = Some(__v))
    def clearImport = copy(`import` = _root_.scala.collection.Seq.empty)
    def addImport(__vs: String*): ScalaPbOptions = addAllImport(__vs)
    def addAllImport(__vs: TraversableOnce[String]): ScalaPbOptions = copy(`import` = `import` ++ __vs)
    def withImport(__v: _root_.scala.collection.Seq[String]): ScalaPbOptions = copy(`import` = __v)
    def clearPreamble = copy(preamble = _root_.scala.collection.Seq.empty)
    def addPreamble(__vs: String*): ScalaPbOptions = addAllPreamble(__vs)
    def addAllPreamble(__vs: TraversableOnce[String]): ScalaPbOptions = copy(preamble = preamble ++ __vs)
    def withPreamble(__v: _root_.scala.collection.Seq[String]): ScalaPbOptions = copy(preamble = __v)
    def getSingleFile: Boolean = singleFile.getOrElse(false)
    def clearSingleFile: ScalaPbOptions = copy(singleFile = None)
    def withSingleFile(__v: Boolean): ScalaPbOptions = copy(singleFile = Some(__v))
    def getNoPrimitiveWrappers: Boolean = noPrimitiveWrappers.getOrElse(false)
    def clearNoPrimitiveWrappers: ScalaPbOptions = copy(noPrimitiveWrappers = None)
    def withNoPrimitiveWrappers(__v: Boolean): ScalaPbOptions = copy(noPrimitiveWrappers = Some(__v))
    def getPrimitiveWrappers: Boolean = primitiveWrappers.getOrElse(false)
    def clearPrimitiveWrappers: ScalaPbOptions = copy(primitiveWrappers = None)
    def withPrimitiveWrappers(__v: Boolean): ScalaPbOptions = copy(primitiveWrappers = Some(__v))
    def getCollectionType: String = collectionType.getOrElse("")
    def clearCollectionType: ScalaPbOptions = copy(collectionType = None)
    def withCollectionType(__v: String): ScalaPbOptions = copy(collectionType = Some(__v))
    def getTestOnlyNoJavaConversions: Boolean = testOnlyNoJavaConversions.getOrElse(false)
    def clearTestOnlyNoJavaConversions: ScalaPbOptions = copy(testOnlyNoJavaConversions = None)
    def withTestOnlyNoJavaConversions(__v: Boolean): ScalaPbOptions = copy(testOnlyNoJavaConversions = Some(__v))
    def getFieldByNumber(__fieldNumber: Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => packageName.orNull
        case 2 => flatPackage.orNull
        case 3 => `import`
        case 4 => preamble
        case 5 => singleFile.orNull
        case 7 => noPrimitiveWrappers.orNull
        case 6 => primitiveWrappers.orNull
        case 8 => collectionType.orNull
        case 100001 => testOnlyNoJavaConversions.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => packageName.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => flatPackage.map(_root_.scalapb.descriptors.PBoolean).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => _root_.scalapb.descriptors.PRepeated(`import`.map(_root_.scalapb.descriptors.PString)(_root_.scala.collection.breakOut))
        case 4 => _root_.scalapb.descriptors.PRepeated(preamble.map(_root_.scalapb.descriptors.PString)(_root_.scala.collection.breakOut))
        case 5 => singleFile.map(_root_.scalapb.descriptors.PBoolean).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 7 => noPrimitiveWrappers.map(_root_.scalapb.descriptors.PBoolean).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 6 => primitiveWrappers.map(_root_.scalapb.descriptors.PBoolean).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 8 => collectionType.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 100001 => testOnlyNoJavaConversions.map(_root_.scalapb.descriptors.PBoolean).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
    def companion = com.trueaccord.scalapb.scalapb.ScalaPbOptions
}

object ScalaPbOptions extends com.trueaccord.scalapb.GeneratedMessageCompanion[com.trueaccord.scalapb.scalapb.ScalaPbOptions] {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[com.trueaccord.scalapb.scalapb.ScalaPbOptions] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): com.trueaccord.scalapb.scalapb.ScalaPbOptions = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    com.trueaccord.scalapb.scalapb.ScalaPbOptions(
      __fieldsMap.get(__fields.get(0)).asInstanceOf[scala.Option[String]],
      __fieldsMap.get(__fields.get(1)).asInstanceOf[scala.Option[Boolean]],
      __fieldsMap.getOrElse(__fields.get(2), Nil).asInstanceOf[_root_.scala.collection.Seq[String]],
      __fieldsMap.getOrElse(__fields.get(3), Nil).asInstanceOf[_root_.scala.collection.Seq[String]],
      __fieldsMap.get(__fields.get(4)).asInstanceOf[scala.Option[Boolean]],
      __fieldsMap.get(__fields.get(5)).asInstanceOf[scala.Option[Boolean]],
      __fieldsMap.get(__fields.get(6)).asInstanceOf[scala.Option[Boolean]],
      __fieldsMap.get(__fields.get(7)).asInstanceOf[scala.Option[String]],
      __fieldsMap.get(__fields.get(8)).asInstanceOf[scala.Option[Boolean]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[com.trueaccord.scalapb.scalapb.ScalaPbOptions] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      com.trueaccord.scalapb.scalapb.ScalaPbOptions(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[scala.Option[String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[scala.Option[Boolean]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.collection.Seq[String]]).getOrElse(_root_.scala.collection.Seq.empty),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.collection.Seq[String]]).getOrElse(_root_.scala.collection.Seq.empty),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[scala.Option[Boolean]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).flatMap(_.as[scala.Option[Boolean]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).flatMap(_.as[scala.Option[Boolean]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).flatMap(_.as[scala.Option[String]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(100001).get).flatMap(_.as[scala.Option[Boolean]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = ScalapbProto.javaDescriptor.getMessageTypes.get(0)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = ScalapbProto.scalaDescriptor.messages(0)
  def messageCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__fieldNumber)
  def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = com.trueaccord.scalapb.scalapb.ScalaPbOptions(
  )
  implicit class ScalaPbOptionsLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, com.trueaccord.scalapb.scalapb.ScalaPbOptions]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, com.trueaccord.scalapb.scalapb.ScalaPbOptions](_l) {
    def packageName: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.getPackageName)((c_, f_) => c_.copy(packageName = Some(f_)))
    def optionalPackageName: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[String]] = field(_.packageName)((c_, f_) => c_.copy(packageName = f_))
    def flatPackage: _root_.com.trueaccord.lenses.Lens[UpperPB, Boolean] = field(_.getFlatPackage)((c_, f_) => c_.copy(flatPackage = Some(f_)))
    def optionalFlatPackage: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Boolean]] = field(_.flatPackage)((c_, f_) => c_.copy(flatPackage = f_))
    def `import`: _root_.com.trueaccord.lenses.Lens[UpperPB, _root_.scala.collection.Seq[String]] = field(_.`import`)((c_, f_) => c_.copy(`import` = f_))
    def preamble: _root_.com.trueaccord.lenses.Lens[UpperPB, _root_.scala.collection.Seq[String]] = field(_.preamble)((c_, f_) => c_.copy(preamble = f_))
    def singleFile: _root_.com.trueaccord.lenses.Lens[UpperPB, Boolean] = field(_.getSingleFile)((c_, f_) => c_.copy(singleFile = Some(f_)))
    def optionalSingleFile: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Boolean]] = field(_.singleFile)((c_, f_) => c_.copy(singleFile = f_))
    def noPrimitiveWrappers: _root_.com.trueaccord.lenses.Lens[UpperPB, Boolean] = field(_.getNoPrimitiveWrappers)((c_, f_) => c_.copy(noPrimitiveWrappers = Some(f_)))
    def optionalNoPrimitiveWrappers: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Boolean]] = field(_.noPrimitiveWrappers)((c_, f_) => c_.copy(noPrimitiveWrappers = f_))
    def primitiveWrappers: _root_.com.trueaccord.lenses.Lens[UpperPB, Boolean] = field(_.getPrimitiveWrappers)((c_, f_) => c_.copy(primitiveWrappers = Some(f_)))
    def optionalPrimitiveWrappers: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Boolean]] = field(_.primitiveWrappers)((c_, f_) => c_.copy(primitiveWrappers = f_))
    def collectionType: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.getCollectionType)((c_, f_) => c_.copy(collectionType = Some(f_)))
    def optionalCollectionType: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[String]] = field(_.collectionType)((c_, f_) => c_.copy(collectionType = f_))
    def testOnlyNoJavaConversions: _root_.com.trueaccord.lenses.Lens[UpperPB, Boolean] = field(_.getTestOnlyNoJavaConversions)((c_, f_) => c_.copy(testOnlyNoJavaConversions = Some(f_)))
    def optionalTestOnlyNoJavaConversions: _root_.com.trueaccord.lenses.Lens[UpperPB, scala.Option[Boolean]] = field(_.testOnlyNoJavaConversions)((c_, f_) => c_.copy(testOnlyNoJavaConversions = f_))
  }
  final val PACKAGE_NAME_FIELD_NUMBER = 1
  final val FLAT_PACKAGE_FIELD_NUMBER = 2
  final val IMPORT_FIELD_NUMBER = 3
  final val PREAMBLE_FIELD_NUMBER = 4
  final val SINGLE_FILE_FIELD_NUMBER = 5
  final val NO_PRIMITIVE_WRAPPERS_FIELD_NUMBER = 7
  final val PRIMITIVE_WRAPPERS_FIELD_NUMBER = 6
  final val COLLECTION_TYPE_FIELD_NUMBER = 8
  final val TEST_ONLY_NO_JAVA_CONVERSIONS_FIELD_NUMBER = 100001
}
