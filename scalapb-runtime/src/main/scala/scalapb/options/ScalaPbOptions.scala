// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package scalapb.options

/** @param packageName
  *   If set then it overrides the java_package and package.
  * @param flatPackage
  *   If true, the compiler does not append the proto base file name
  *   into the generated package name. If false (the default), the
  *   generated scala package name is the package_name.basename where
  *   basename is the proto file name without the .proto extension.
  * @param import
  *   Adds the following imports at the top of the file (this is meant
  *   to provide implicit TypeMappers)
  * @param preamble
  *   Text to add to the generated scala file.  This can be used only
  *   when single_file is true.
  * @param singleFile
  *   If true, all messages and enums (but not services) will be written
  *   to a single Scala file.
  * @param noPrimitiveWrappers
  *   By default, wrappers defined at
  *   https://github.com/google/protobuf/blob/master/src/google/protobuf/wrappers.proto,
  *   are mapped to an Option[T] where T is a primitive type. When this field
  *   is set to true, we do not perform this transformation.
  * @param primitiveWrappers
  *   DEPRECATED. In ScalaPB &lt;= 0.5.47, it was necessary to explicitly enable
  *   primitive_wrappers. This field remains here for backwards compatibility,
  *   but it has no effect on generated code. It is an error to set both
  *   `primitive_wrappers` and `no_primitive_wrappers`.
  * @param collectionType
  *   Scala type to be used for repeated fields. If unspecified,
  *   `scala.collection.Seq` will be used.
  * @param preserveUnknownFields
  *   If set to true, all generated messages in this file will preserve unknown
  *   fields.
  * @param objectName
  *   If defined, sets the name of the file-level object that would be generated. This
  *   object extends `GeneratedFileObject` and contains descriptors, and list of message
  *   and enum companions.
  * @param scope
  *   Experimental: scope to apply the given options.
  * @param lenses
  *   If true, lenses will be generated.
  * @param retainSourceCodeInfo
  *   If true, then source-code info information will be included in the
  *   generated code - normally the source code info is cleared out to reduce
  *   code size.  The source code info is useful for extracting source code
  *   location from the descriptors as well as comments.
  * @param mapType
  *   Scala type to be used for maps. If unspecified,
  *   `scala.collection.immutable.Map` will be used.
  * @param noDefaultValuesInConstructor
  *   If true, no default values will be generated in message constructors.
  * @param enumStripPrefix
  *   Indicate if prefix (enum name + optional underscore) should be removed in scala code
  *   Strip is applied before enum value naming changes.
  * @param auxMessageOptions
  *   List of message options to apply to some messages.
  * @param auxFieldOptions
  *   List of message options to apply to some fields.
  * @param auxEnumOptions
  *   List of message options to apply to some enums.
  * @param bytesType
  *   Scala type to use for bytes fields.
  * @param testOnlyNoJavaConversions
  *   For use in tests only. Inhibit Java conversions even when when generator parameters
  *   request for it.
  */
@SerialVersionUID(0L)
final case class ScalaPbOptions(
    packageName: _root_.scala.Option[_root_.scala.Predef.String] = _root_.scala.None,
    flatPackage: _root_.scala.Option[_root_.scala.Boolean] = _root_.scala.None,
    `import`: _root_.scala.Seq[_root_.scala.Predef.String] = _root_.scala.Seq.empty,
    preamble: _root_.scala.Seq[_root_.scala.Predef.String] = _root_.scala.Seq.empty,
    singleFile: _root_.scala.Option[_root_.scala.Boolean] = _root_.scala.None,
    noPrimitiveWrappers: _root_.scala.Option[_root_.scala.Boolean] = _root_.scala.None,
    primitiveWrappers: _root_.scala.Option[_root_.scala.Boolean] = _root_.scala.None,
    collectionType: _root_.scala.Option[_root_.scala.Predef.String] = _root_.scala.None,
    preserveUnknownFields: _root_.scala.Option[_root_.scala.Boolean] = _root_.scala.None,
    objectName: _root_.scala.Option[_root_.scala.Predef.String] = _root_.scala.None,
    scope: _root_.scala.Option[scalapb.options.ScalaPbOptions.OptionsScope] = _root_.scala.None,
    lenses: _root_.scala.Option[_root_.scala.Boolean] = _root_.scala.None,
    retainSourceCodeInfo: _root_.scala.Option[_root_.scala.Boolean] = _root_.scala.None,
    mapType: _root_.scala.Option[_root_.scala.Predef.String] = _root_.scala.None,
    noDefaultValuesInConstructor: _root_.scala.Option[_root_.scala.Boolean] = _root_.scala.None,
    enumValueNaming: _root_.scala.Option[scalapb.options.ScalaPbOptions.EnumValueNaming] = _root_.scala.None,
    enumStripPrefix: _root_.scala.Option[_root_.scala.Boolean] = _root_.scala.None,
    auxMessageOptions: _root_.scala.Seq[scalapb.options.ScalaPbOptions.AuxMessageOptions] = _root_.scala.Seq.empty,
    auxFieldOptions: _root_.scala.Seq[scalapb.options.ScalaPbOptions.AuxFieldOptions] = _root_.scala.Seq.empty,
    auxEnumOptions: _root_.scala.Seq[scalapb.options.ScalaPbOptions.AuxEnumOptions] = _root_.scala.Seq.empty,
    bytesType: _root_.scala.Option[_root_.scala.Predef.String] = _root_.scala.None,
    testOnlyNoJavaConversions: _root_.scala.Option[_root_.scala.Boolean] = _root_.scala.None,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[ScalaPbOptions] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (packageName.isDefined) {
        val __value = packageName.get
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
      };
      if (flatPackage.isDefined) {
        val __value = flatPackage.get
        __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(2, __value)
      };
      `import`.foreach { __item =>
        val __value = __item
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, __value)
      }
      preamble.foreach { __item =>
        val __value = __item
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(4, __value)
      }
      if (singleFile.isDefined) {
        val __value = singleFile.get
        __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(5, __value)
      };
      if (noPrimitiveWrappers.isDefined) {
        val __value = noPrimitiveWrappers.get
        __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(7, __value)
      };
      if (primitiveWrappers.isDefined) {
        val __value = primitiveWrappers.get
        __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(6, __value)
      };
      if (collectionType.isDefined) {
        val __value = collectionType.get
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(8, __value)
      };
      if (preserveUnknownFields.isDefined) {
        val __value = preserveUnknownFields.get
        __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(9, __value)
      };
      if (objectName.isDefined) {
        val __value = objectName.get
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(10, __value)
      };
      if (scope.isDefined) {
        val __value = scope.get.value
        __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(11, __value)
      };
      if (lenses.isDefined) {
        val __value = lenses.get
        __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(12, __value)
      };
      if (retainSourceCodeInfo.isDefined) {
        val __value = retainSourceCodeInfo.get
        __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(13, __value)
      };
      if (mapType.isDefined) {
        val __value = mapType.get
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(14, __value)
      };
      if (noDefaultValuesInConstructor.isDefined) {
        val __value = noDefaultValuesInConstructor.get
        __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(15, __value)
      };
      if (enumValueNaming.isDefined) {
        val __value = enumValueNaming.get.value
        __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(16, __value)
      };
      if (enumStripPrefix.isDefined) {
        val __value = enumStripPrefix.get
        __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(17, __value)
      };
      auxMessageOptions.foreach { __item =>
        val __value = __item
        __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      auxFieldOptions.foreach { __item =>
        val __value = __item
        __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      auxEnumOptions.foreach { __item =>
        val __value = __item
        __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      if (bytesType.isDefined) {
        val __value = bytesType.get
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(21, __value)
      };
      if (testOnlyNoJavaConversions.isDefined) {
        val __value = testOnlyNoJavaConversions.get
        __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(100001, __value)
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      packageName.foreach { __v =>
        val __m = __v
        _output__.writeString(1, __m)
      };
      flatPackage.foreach { __v =>
        val __m = __v
        _output__.writeBool(2, __m)
      };
      `import`.foreach { __v =>
        val __m = __v
        _output__.writeString(3, __m)
      };
      preamble.foreach { __v =>
        val __m = __v
        _output__.writeString(4, __m)
      };
      singleFile.foreach { __v =>
        val __m = __v
        _output__.writeBool(5, __m)
      };
      primitiveWrappers.foreach { __v =>
        val __m = __v
        _output__.writeBool(6, __m)
      };
      noPrimitiveWrappers.foreach { __v =>
        val __m = __v
        _output__.writeBool(7, __m)
      };
      collectionType.foreach { __v =>
        val __m = __v
        _output__.writeString(8, __m)
      };
      preserveUnknownFields.foreach { __v =>
        val __m = __v
        _output__.writeBool(9, __m)
      };
      objectName.foreach { __v =>
        val __m = __v
        _output__.writeString(10, __m)
      };
      scope.foreach { __v =>
        val __m = __v.value
        _output__.writeEnum(11, __m)
      };
      lenses.foreach { __v =>
        val __m = __v
        _output__.writeBool(12, __m)
      };
      retainSourceCodeInfo.foreach { __v =>
        val __m = __v
        _output__.writeBool(13, __m)
      };
      mapType.foreach { __v =>
        val __m = __v
        _output__.writeString(14, __m)
      };
      noDefaultValuesInConstructor.foreach { __v =>
        val __m = __v
        _output__.writeBool(15, __m)
      };
      enumValueNaming.foreach { __v =>
        val __m = __v.value
        _output__.writeEnum(16, __m)
      };
      enumStripPrefix.foreach { __v =>
        val __m = __v
        _output__.writeBool(17, __m)
      };
      auxMessageOptions.foreach { __v =>
        val __m = __v
        _output__.writeTag(18, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      auxFieldOptions.foreach { __v =>
        val __m = __v
        _output__.writeTag(19, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      auxEnumOptions.foreach { __v =>
        val __m = __v
        _output__.writeTag(20, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      bytesType.foreach { __v =>
        val __m = __v
        _output__.writeString(21, __m)
      };
      testOnlyNoJavaConversions.foreach { __v =>
        val __m = __v
        _output__.writeBool(100001, __m)
      };
      unknownFields.writeTo(_output__)
    }
    def getPackageName: _root_.scala.Predef.String = packageName.getOrElse("")
    def clearPackageName: ScalaPbOptions = copy(packageName = _root_.scala.None)
    def withPackageName(__v: _root_.scala.Predef.String): ScalaPbOptions = copy(packageName = Option(__v))
    def getFlatPackage: _root_.scala.Boolean = flatPackage.getOrElse(false)
    def clearFlatPackage: ScalaPbOptions = copy(flatPackage = _root_.scala.None)
    def withFlatPackage(__v: _root_.scala.Boolean): ScalaPbOptions = copy(flatPackage = Option(__v))
    def clearImport = copy(`import` = _root_.scala.Seq.empty)
    def addImport(__vs: _root_.scala.Predef.String*): ScalaPbOptions = addAllImport(__vs)
    def addAllImport(__vs: Iterable[_root_.scala.Predef.String]): ScalaPbOptions = copy(`import` = `import` ++ __vs)
    def withImport(__v: _root_.scala.Seq[_root_.scala.Predef.String]): ScalaPbOptions = copy(`import` = __v)
    def clearPreamble = copy(preamble = _root_.scala.Seq.empty)
    def addPreamble(__vs: _root_.scala.Predef.String*): ScalaPbOptions = addAllPreamble(__vs)
    def addAllPreamble(__vs: Iterable[_root_.scala.Predef.String]): ScalaPbOptions = copy(preamble = preamble ++ __vs)
    def withPreamble(__v: _root_.scala.Seq[_root_.scala.Predef.String]): ScalaPbOptions = copy(preamble = __v)
    def getSingleFile: _root_.scala.Boolean = singleFile.getOrElse(false)
    def clearSingleFile: ScalaPbOptions = copy(singleFile = _root_.scala.None)
    def withSingleFile(__v: _root_.scala.Boolean): ScalaPbOptions = copy(singleFile = Option(__v))
    def getNoPrimitiveWrappers: _root_.scala.Boolean = noPrimitiveWrappers.getOrElse(false)
    def clearNoPrimitiveWrappers: ScalaPbOptions = copy(noPrimitiveWrappers = _root_.scala.None)
    def withNoPrimitiveWrappers(__v: _root_.scala.Boolean): ScalaPbOptions = copy(noPrimitiveWrappers = Option(__v))
    def getPrimitiveWrappers: _root_.scala.Boolean = primitiveWrappers.getOrElse(false)
    def clearPrimitiveWrappers: ScalaPbOptions = copy(primitiveWrappers = _root_.scala.None)
    def withPrimitiveWrappers(__v: _root_.scala.Boolean): ScalaPbOptions = copy(primitiveWrappers = Option(__v))
    def getCollectionType: _root_.scala.Predef.String = collectionType.getOrElse("")
    def clearCollectionType: ScalaPbOptions = copy(collectionType = _root_.scala.None)
    def withCollectionType(__v: _root_.scala.Predef.String): ScalaPbOptions = copy(collectionType = Option(__v))
    def getPreserveUnknownFields: _root_.scala.Boolean = preserveUnknownFields.getOrElse(true)
    def clearPreserveUnknownFields: ScalaPbOptions = copy(preserveUnknownFields = _root_.scala.None)
    def withPreserveUnknownFields(__v: _root_.scala.Boolean): ScalaPbOptions = copy(preserveUnknownFields = Option(__v))
    def getObjectName: _root_.scala.Predef.String = objectName.getOrElse("")
    def clearObjectName: ScalaPbOptions = copy(objectName = _root_.scala.None)
    def withObjectName(__v: _root_.scala.Predef.String): ScalaPbOptions = copy(objectName = Option(__v))
    def getScope: scalapb.options.ScalaPbOptions.OptionsScope = scope.getOrElse(scalapb.options.ScalaPbOptions.OptionsScope.FILE)
    def clearScope: ScalaPbOptions = copy(scope = _root_.scala.None)
    def withScope(__v: scalapb.options.ScalaPbOptions.OptionsScope): ScalaPbOptions = copy(scope = Option(__v))
    def getLenses: _root_.scala.Boolean = lenses.getOrElse(true)
    def clearLenses: ScalaPbOptions = copy(lenses = _root_.scala.None)
    def withLenses(__v: _root_.scala.Boolean): ScalaPbOptions = copy(lenses = Option(__v))
    def getRetainSourceCodeInfo: _root_.scala.Boolean = retainSourceCodeInfo.getOrElse(false)
    def clearRetainSourceCodeInfo: ScalaPbOptions = copy(retainSourceCodeInfo = _root_.scala.None)
    def withRetainSourceCodeInfo(__v: _root_.scala.Boolean): ScalaPbOptions = copy(retainSourceCodeInfo = Option(__v))
    def getMapType: _root_.scala.Predef.String = mapType.getOrElse("")
    def clearMapType: ScalaPbOptions = copy(mapType = _root_.scala.None)
    def withMapType(__v: _root_.scala.Predef.String): ScalaPbOptions = copy(mapType = Option(__v))
    def getNoDefaultValuesInConstructor: _root_.scala.Boolean = noDefaultValuesInConstructor.getOrElse(false)
    def clearNoDefaultValuesInConstructor: ScalaPbOptions = copy(noDefaultValuesInConstructor = _root_.scala.None)
    def withNoDefaultValuesInConstructor(__v: _root_.scala.Boolean): ScalaPbOptions = copy(noDefaultValuesInConstructor = Option(__v))
    def getEnumValueNaming: scalapb.options.ScalaPbOptions.EnumValueNaming = enumValueNaming.getOrElse(scalapb.options.ScalaPbOptions.EnumValueNaming.AS_IN_PROTO)
    def clearEnumValueNaming: ScalaPbOptions = copy(enumValueNaming = _root_.scala.None)
    def withEnumValueNaming(__v: scalapb.options.ScalaPbOptions.EnumValueNaming): ScalaPbOptions = copy(enumValueNaming = Option(__v))
    def getEnumStripPrefix: _root_.scala.Boolean = enumStripPrefix.getOrElse(false)
    def clearEnumStripPrefix: ScalaPbOptions = copy(enumStripPrefix = _root_.scala.None)
    def withEnumStripPrefix(__v: _root_.scala.Boolean): ScalaPbOptions = copy(enumStripPrefix = Option(__v))
    def clearAuxMessageOptions = copy(auxMessageOptions = _root_.scala.Seq.empty)
    def addAuxMessageOptions(__vs: scalapb.options.ScalaPbOptions.AuxMessageOptions*): ScalaPbOptions = addAllAuxMessageOptions(__vs)
    def addAllAuxMessageOptions(__vs: Iterable[scalapb.options.ScalaPbOptions.AuxMessageOptions]): ScalaPbOptions = copy(auxMessageOptions = auxMessageOptions ++ __vs)
    def withAuxMessageOptions(__v: _root_.scala.Seq[scalapb.options.ScalaPbOptions.AuxMessageOptions]): ScalaPbOptions = copy(auxMessageOptions = __v)
    def clearAuxFieldOptions = copy(auxFieldOptions = _root_.scala.Seq.empty)
    def addAuxFieldOptions(__vs: scalapb.options.ScalaPbOptions.AuxFieldOptions*): ScalaPbOptions = addAllAuxFieldOptions(__vs)
    def addAllAuxFieldOptions(__vs: Iterable[scalapb.options.ScalaPbOptions.AuxFieldOptions]): ScalaPbOptions = copy(auxFieldOptions = auxFieldOptions ++ __vs)
    def withAuxFieldOptions(__v: _root_.scala.Seq[scalapb.options.ScalaPbOptions.AuxFieldOptions]): ScalaPbOptions = copy(auxFieldOptions = __v)
    def clearAuxEnumOptions = copy(auxEnumOptions = _root_.scala.Seq.empty)
    def addAuxEnumOptions(__vs: scalapb.options.ScalaPbOptions.AuxEnumOptions*): ScalaPbOptions = addAllAuxEnumOptions(__vs)
    def addAllAuxEnumOptions(__vs: Iterable[scalapb.options.ScalaPbOptions.AuxEnumOptions]): ScalaPbOptions = copy(auxEnumOptions = auxEnumOptions ++ __vs)
    def withAuxEnumOptions(__v: _root_.scala.Seq[scalapb.options.ScalaPbOptions.AuxEnumOptions]): ScalaPbOptions = copy(auxEnumOptions = __v)
    def getBytesType: _root_.scala.Predef.String = bytesType.getOrElse("")
    def clearBytesType: ScalaPbOptions = copy(bytesType = _root_.scala.None)
    def withBytesType(__v: _root_.scala.Predef.String): ScalaPbOptions = copy(bytesType = Option(__v))
    def getTestOnlyNoJavaConversions: _root_.scala.Boolean = testOnlyNoJavaConversions.getOrElse(false)
    def clearTestOnlyNoJavaConversions: ScalaPbOptions = copy(testOnlyNoJavaConversions = _root_.scala.None)
    def withTestOnlyNoJavaConversions(__v: _root_.scala.Boolean): ScalaPbOptions = copy(testOnlyNoJavaConversions = Option(__v))
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => packageName.orNull
        case 2 => flatPackage.orNull
        case 3 => `import`
        case 4 => preamble
        case 5 => singleFile.orNull
        case 7 => noPrimitiveWrappers.orNull
        case 6 => primitiveWrappers.orNull
        case 8 => collectionType.orNull
        case 9 => preserveUnknownFields.orNull
        case 10 => objectName.orNull
        case 11 => scope.map(_.javaValueDescriptor).orNull
        case 12 => lenses.orNull
        case 13 => retainSourceCodeInfo.orNull
        case 14 => mapType.orNull
        case 15 => noDefaultValuesInConstructor.orNull
        case 16 => enumValueNaming.map(_.javaValueDescriptor).orNull
        case 17 => enumStripPrefix.orNull
        case 18 => auxMessageOptions
        case 19 => auxFieldOptions
        case 20 => auxEnumOptions
        case 21 => bytesType.orNull
        case 100001 => testOnlyNoJavaConversions.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => packageName.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => flatPackage.map(_root_.scalapb.descriptors.PBoolean).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => _root_.scalapb.descriptors.PRepeated(`import`.iterator.map(_root_.scalapb.descriptors.PString).toVector)
        case 4 => _root_.scalapb.descriptors.PRepeated(preamble.iterator.map(_root_.scalapb.descriptors.PString).toVector)
        case 5 => singleFile.map(_root_.scalapb.descriptors.PBoolean).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 7 => noPrimitiveWrappers.map(_root_.scalapb.descriptors.PBoolean).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 6 => primitiveWrappers.map(_root_.scalapb.descriptors.PBoolean).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 8 => collectionType.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 9 => preserveUnknownFields.map(_root_.scalapb.descriptors.PBoolean).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 10 => objectName.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 11 => scope.map(__e => _root_.scalapb.descriptors.PEnum(__e.scalaValueDescriptor)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 12 => lenses.map(_root_.scalapb.descriptors.PBoolean).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 13 => retainSourceCodeInfo.map(_root_.scalapb.descriptors.PBoolean).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 14 => mapType.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 15 => noDefaultValuesInConstructor.map(_root_.scalapb.descriptors.PBoolean).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 16 => enumValueNaming.map(__e => _root_.scalapb.descriptors.PEnum(__e.scalaValueDescriptor)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 17 => enumStripPrefix.map(_root_.scalapb.descriptors.PBoolean).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 18 => _root_.scalapb.descriptors.PRepeated(auxMessageOptions.iterator.map(_.toPMessage).toVector)
        case 19 => _root_.scalapb.descriptors.PRepeated(auxFieldOptions.iterator.map(_.toPMessage).toVector)
        case 20 => _root_.scalapb.descriptors.PRepeated(auxEnumOptions.iterator.map(_.toPMessage).toVector)
        case 21 => bytesType.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 100001 => testOnlyNoJavaConversions.map(_root_.scalapb.descriptors.PBoolean).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = scalapb.options.ScalaPbOptions
}

object ScalaPbOptions extends scalapb.GeneratedMessageCompanion[scalapb.options.ScalaPbOptions] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scalapb.options.ScalaPbOptions] = this
  def merge(`_message__`: scalapb.options.ScalaPbOptions, `_input__`: _root_.com.google.protobuf.CodedInputStream): scalapb.options.ScalaPbOptions = {
    var __packageName = `_message__`.packageName
    var __flatPackage = `_message__`.flatPackage
    val __import = (_root_.scala.collection.immutable.Vector.newBuilder[_root_.scala.Predef.String] ++= `_message__`.`import`)
    val __preamble = (_root_.scala.collection.immutable.Vector.newBuilder[_root_.scala.Predef.String] ++= `_message__`.preamble)
    var __singleFile = `_message__`.singleFile
    var __noPrimitiveWrappers = `_message__`.noPrimitiveWrappers
    var __primitiveWrappers = `_message__`.primitiveWrappers
    var __collectionType = `_message__`.collectionType
    var __preserveUnknownFields = `_message__`.preserveUnknownFields
    var __objectName = `_message__`.objectName
    var __scope = `_message__`.scope
    var __lenses = `_message__`.lenses
    var __retainSourceCodeInfo = `_message__`.retainSourceCodeInfo
    var __mapType = `_message__`.mapType
    var __noDefaultValuesInConstructor = `_message__`.noDefaultValuesInConstructor
    var __enumValueNaming = `_message__`.enumValueNaming
    var __enumStripPrefix = `_message__`.enumStripPrefix
    val __auxMessageOptions = (_root_.scala.collection.immutable.Vector.newBuilder[scalapb.options.ScalaPbOptions.AuxMessageOptions] ++= `_message__`.auxMessageOptions)
    val __auxFieldOptions = (_root_.scala.collection.immutable.Vector.newBuilder[scalapb.options.ScalaPbOptions.AuxFieldOptions] ++= `_message__`.auxFieldOptions)
    val __auxEnumOptions = (_root_.scala.collection.immutable.Vector.newBuilder[scalapb.options.ScalaPbOptions.AuxEnumOptions] ++= `_message__`.auxEnumOptions)
    var __bytesType = `_message__`.bytesType
    var __testOnlyNoJavaConversions = `_message__`.testOnlyNoJavaConversions
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __packageName = Option(_input__.readStringRequireUtf8())
        case 16 =>
          __flatPackage = Option(_input__.readBool())
        case 26 =>
          __import += _input__.readStringRequireUtf8()
        case 34 =>
          __preamble += _input__.readStringRequireUtf8()
        case 40 =>
          __singleFile = Option(_input__.readBool())
        case 56 =>
          __noPrimitiveWrappers = Option(_input__.readBool())
        case 48 =>
          __primitiveWrappers = Option(_input__.readBool())
        case 66 =>
          __collectionType = Option(_input__.readStringRequireUtf8())
        case 72 =>
          __preserveUnknownFields = Option(_input__.readBool())
        case 82 =>
          __objectName = Option(_input__.readStringRequireUtf8())
        case 88 =>
          __scope = Option(scalapb.options.ScalaPbOptions.OptionsScope.fromValue(_input__.readEnum()))
        case 96 =>
          __lenses = Option(_input__.readBool())
        case 104 =>
          __retainSourceCodeInfo = Option(_input__.readBool())
        case 114 =>
          __mapType = Option(_input__.readStringRequireUtf8())
        case 120 =>
          __noDefaultValuesInConstructor = Option(_input__.readBool())
        case 128 =>
          __enumValueNaming = Option(scalapb.options.ScalaPbOptions.EnumValueNaming.fromValue(_input__.readEnum()))
        case 136 =>
          __enumStripPrefix = Option(_input__.readBool())
        case 146 =>
          __auxMessageOptions += _root_.scalapb.LiteParser.readMessage(_input__, scalapb.options.ScalaPbOptions.AuxMessageOptions.defaultInstance)
        case 154 =>
          __auxFieldOptions += _root_.scalapb.LiteParser.readMessage(_input__, scalapb.options.ScalaPbOptions.AuxFieldOptions.defaultInstance)
        case 162 =>
          __auxEnumOptions += _root_.scalapb.LiteParser.readMessage(_input__, scalapb.options.ScalaPbOptions.AuxEnumOptions.defaultInstance)
        case 170 =>
          __bytesType = Option(_input__.readStringRequireUtf8())
        case 800008 =>
          __testOnlyNoJavaConversions = Option(_input__.readBool())
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder(_message__.unknownFields)
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    scalapb.options.ScalaPbOptions(
        packageName = __packageName,
        flatPackage = __flatPackage,
        `import` = __import.result(),
        preamble = __preamble.result(),
        singleFile = __singleFile,
        noPrimitiveWrappers = __noPrimitiveWrappers,
        primitiveWrappers = __primitiveWrappers,
        collectionType = __collectionType,
        preserveUnknownFields = __preserveUnknownFields,
        objectName = __objectName,
        scope = __scope,
        lenses = __lenses,
        retainSourceCodeInfo = __retainSourceCodeInfo,
        mapType = __mapType,
        noDefaultValuesInConstructor = __noDefaultValuesInConstructor,
        enumValueNaming = __enumValueNaming,
        enumStripPrefix = __enumStripPrefix,
        auxMessageOptions = __auxMessageOptions.result(),
        auxFieldOptions = __auxFieldOptions.result(),
        auxEnumOptions = __auxEnumOptions.result(),
        bytesType = __bytesType,
        testOnlyNoJavaConversions = __testOnlyNoJavaConversions,
        unknownFields = if (_unknownFields__ == null) _message__.unknownFields else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[scalapb.options.ScalaPbOptions] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      scalapb.options.ScalaPbOptions(
        packageName = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Predef.String]]),
        flatPackage = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Boolean]]),
        `import` = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Seq[_root_.scala.Predef.String]]).getOrElse(_root_.scala.Seq.empty),
        preamble = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Seq[_root_.scala.Predef.String]]).getOrElse(_root_.scala.Seq.empty),
        singleFile = __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Boolean]]),
        noPrimitiveWrappers = __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Boolean]]),
        primitiveWrappers = __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Boolean]]),
        collectionType = __fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Predef.String]]),
        preserveUnknownFields = __fieldsMap.get(scalaDescriptor.findFieldByNumber(9).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Boolean]]),
        objectName = __fieldsMap.get(scalaDescriptor.findFieldByNumber(10).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Predef.String]]),
        scope = __fieldsMap.get(scalaDescriptor.findFieldByNumber(11).get).flatMap(_.as[_root_.scala.Option[_root_.scalapb.descriptors.EnumValueDescriptor]]).map(__e => scalapb.options.ScalaPbOptions.OptionsScope.fromValue(__e.number)),
        lenses = __fieldsMap.get(scalaDescriptor.findFieldByNumber(12).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Boolean]]),
        retainSourceCodeInfo = __fieldsMap.get(scalaDescriptor.findFieldByNumber(13).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Boolean]]),
        mapType = __fieldsMap.get(scalaDescriptor.findFieldByNumber(14).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Predef.String]]),
        noDefaultValuesInConstructor = __fieldsMap.get(scalaDescriptor.findFieldByNumber(15).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Boolean]]),
        enumValueNaming = __fieldsMap.get(scalaDescriptor.findFieldByNumber(16).get).flatMap(_.as[_root_.scala.Option[_root_.scalapb.descriptors.EnumValueDescriptor]]).map(__e => scalapb.options.ScalaPbOptions.EnumValueNaming.fromValue(__e.number)),
        enumStripPrefix = __fieldsMap.get(scalaDescriptor.findFieldByNumber(17).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Boolean]]),
        auxMessageOptions = __fieldsMap.get(scalaDescriptor.findFieldByNumber(18).get).map(_.as[_root_.scala.Seq[scalapb.options.ScalaPbOptions.AuxMessageOptions]]).getOrElse(_root_.scala.Seq.empty),
        auxFieldOptions = __fieldsMap.get(scalaDescriptor.findFieldByNumber(19).get).map(_.as[_root_.scala.Seq[scalapb.options.ScalaPbOptions.AuxFieldOptions]]).getOrElse(_root_.scala.Seq.empty),
        auxEnumOptions = __fieldsMap.get(scalaDescriptor.findFieldByNumber(20).get).map(_.as[_root_.scala.Seq[scalapb.options.ScalaPbOptions.AuxEnumOptions]]).getOrElse(_root_.scala.Seq.empty),
        bytesType = __fieldsMap.get(scalaDescriptor.findFieldByNumber(21).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Predef.String]]),
        testOnlyNoJavaConversions = __fieldsMap.get(scalaDescriptor.findFieldByNumber(100001).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Boolean]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = ScalapbProto.javaDescriptor.getMessageTypes().get(0)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = ScalapbProto.scalaDescriptor.messages(0)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 18 => __out = scalapb.options.ScalaPbOptions.AuxMessageOptions
      case 19 => __out = scalapb.options.ScalaPbOptions.AuxFieldOptions
      case 20 => __out = scalapb.options.ScalaPbOptions.AuxEnumOptions
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] =
    Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]](
      _root_.scalapb.options.ScalaPbOptions.AuxMessageOptions,
      _root_.scalapb.options.ScalaPbOptions.AuxFieldOptions,
      _root_.scalapb.options.ScalaPbOptions.AuxEnumOptions
    )
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = {
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 11 => scalapb.options.ScalaPbOptions.OptionsScope
      case 16 => scalapb.options.ScalaPbOptions.EnumValueNaming
    }
  }
  lazy val defaultInstance = scalapb.options.ScalaPbOptions(
    packageName = _root_.scala.None,
    flatPackage = _root_.scala.None,
    `import` = _root_.scala.Seq.empty,
    preamble = _root_.scala.Seq.empty,
    singleFile = _root_.scala.None,
    noPrimitiveWrappers = _root_.scala.None,
    primitiveWrappers = _root_.scala.None,
    collectionType = _root_.scala.None,
    preserveUnknownFields = _root_.scala.None,
    objectName = _root_.scala.None,
    scope = _root_.scala.None,
    lenses = _root_.scala.None,
    retainSourceCodeInfo = _root_.scala.None,
    mapType = _root_.scala.None,
    noDefaultValuesInConstructor = _root_.scala.None,
    enumValueNaming = _root_.scala.None,
    enumStripPrefix = _root_.scala.None,
    auxMessageOptions = _root_.scala.Seq.empty,
    auxFieldOptions = _root_.scala.Seq.empty,
    auxEnumOptions = _root_.scala.Seq.empty,
    bytesType = _root_.scala.None,
    testOnlyNoJavaConversions = _root_.scala.None
  )
  /** Whether to apply the options only to this file, or for the entire package (and its subpackages)
    */
  sealed abstract class OptionsScope(val value: _root_.scala.Int) extends _root_.scalapb.GeneratedEnum {
    type EnumType = OptionsScope
    def isFile: _root_.scala.Boolean = false
    def isPackage: _root_.scala.Boolean = false
    def companion: _root_.scalapb.GeneratedEnumCompanion[OptionsScope] = scalapb.options.ScalaPbOptions.OptionsScope
    final def asRecognized: _root_.scala.Option[scalapb.options.ScalaPbOptions.OptionsScope.Recognized] = if (isUnrecognized) _root_.scala.None else _root_.scala.Some(this.asInstanceOf[scalapb.options.ScalaPbOptions.OptionsScope.Recognized])
  }
  
  object OptionsScope extends _root_.scalapb.GeneratedEnumCompanion[OptionsScope] {
    sealed trait Recognized extends OptionsScope
    implicit def enumCompanion: _root_.scalapb.GeneratedEnumCompanion[OptionsScope] = this
    /** Apply the options for this file only (default)
      */
    @SerialVersionUID(0L)
    case object FILE extends OptionsScope(0) with OptionsScope.Recognized {
      val index = 0
      val name = "FILE"
      override def isFile: _root_.scala.Boolean = true
    }
    
    /** Apply the options for the entire package and its subpackages.
      */
    @SerialVersionUID(0L)
    case object PACKAGE extends OptionsScope(1) with OptionsScope.Recognized {
      val index = 1
      val name = "PACKAGE"
      override def isPackage: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    final case class Unrecognized(unrecognizedValue: _root_.scala.Int) extends OptionsScope(unrecognizedValue) with _root_.scalapb.UnrecognizedEnum
    
    lazy val values = scala.collection.immutable.Seq(FILE, PACKAGE)
    def fromValue(__value: _root_.scala.Int): OptionsScope = __value match {
      case 0 => FILE
      case 1 => PACKAGE
      case __other => Unrecognized(__other)
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.EnumDescriptor = scalapb.options.ScalaPbOptions.javaDescriptor.getEnumTypes().get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.EnumDescriptor = scalapb.options.ScalaPbOptions.scalaDescriptor.enums(0)
  }
  /** Naming convention for generated enum values 
    */
  sealed abstract class EnumValueNaming(val value: _root_.scala.Int) extends _root_.scalapb.GeneratedEnum {
    type EnumType = EnumValueNaming
    def isAsInProto: _root_.scala.Boolean = false
    def isCamelCase: _root_.scala.Boolean = false
    def companion: _root_.scalapb.GeneratedEnumCompanion[EnumValueNaming] = scalapb.options.ScalaPbOptions.EnumValueNaming
    final def asRecognized: _root_.scala.Option[scalapb.options.ScalaPbOptions.EnumValueNaming.Recognized] = if (isUnrecognized) _root_.scala.None else _root_.scala.Some(this.asInstanceOf[scalapb.options.ScalaPbOptions.EnumValueNaming.Recognized])
  }
  
  object EnumValueNaming extends _root_.scalapb.GeneratedEnumCompanion[EnumValueNaming] {
    sealed trait Recognized extends EnumValueNaming
    implicit def enumCompanion: _root_.scalapb.GeneratedEnumCompanion[EnumValueNaming] = this
    /** Enum value names in Scala use the same name as in the proto
      */
    @SerialVersionUID(0L)
    case object AS_IN_PROTO extends EnumValueNaming(0) with EnumValueNaming.Recognized {
      val index = 0
      val name = "AS_IN_PROTO"
      override def isAsInProto: _root_.scala.Boolean = true
    }
    
    /** Convert enum values to CamelCase in Scala.
      */
    @SerialVersionUID(0L)
    case object CAMEL_CASE extends EnumValueNaming(1) with EnumValueNaming.Recognized {
      val index = 1
      val name = "CAMEL_CASE"
      override def isCamelCase: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    final case class Unrecognized(unrecognizedValue: _root_.scala.Int) extends EnumValueNaming(unrecognizedValue) with _root_.scalapb.UnrecognizedEnum
    
    lazy val values = scala.collection.immutable.Seq(AS_IN_PROTO, CAMEL_CASE)
    def fromValue(__value: _root_.scala.Int): EnumValueNaming = __value match {
      case 0 => AS_IN_PROTO
      case 1 => CAMEL_CASE
      case __other => Unrecognized(__other)
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.EnumDescriptor = scalapb.options.ScalaPbOptions.javaDescriptor.getEnumTypes().get(1)
    def scalaDescriptor: _root_.scalapb.descriptors.EnumDescriptor = scalapb.options.ScalaPbOptions.scalaDescriptor.enums(1)
  }
  /** AuxMessageOptions enables you to set message-level options through package-scoped options.
    * This is useful when you can't add a dependency on scalapb.proto from the proto file that
    * defines the message.
    *
    * @param target
    *   The fully-qualified name of the message in the proto name space.
    * @param options
    *   Options to apply to the message. If there are any options defined on the target message
    *   they take precedence over the options.
    */
  @SerialVersionUID(0L)
  final case class AuxMessageOptions(
      target: _root_.scala.Option[_root_.scala.Predef.String] = _root_.scala.None,
      options: _root_.scala.Option[scalapb.options.MessageOptions] = _root_.scala.None,
      unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
      ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[AuxMessageOptions] {
      @transient
      private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
      private[this] def __computeSerializedValue(): _root_.scala.Int = {
        var __size = 0
        if (target.isDefined) {
          val __value = target.get
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
        };
        if (options.isDefined) {
          val __value = options.get
          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        };
        __size += unknownFields.serializedSize
        __size
      }
      override def serializedSize: _root_.scala.Int = {
        var read = __serializedSizeCachedValue
        if (read == 0) {
          read = __computeSerializedValue()
          __serializedSizeCachedValue = read
        }
        read
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        target.foreach { __v =>
          val __m = __v
          _output__.writeString(1, __m)
        };
        options.foreach { __v =>
          val __m = __v
          _output__.writeTag(2, 2)
          _output__.writeUInt32NoTag(__m.serializedSize)
          __m.writeTo(_output__)
        };
        unknownFields.writeTo(_output__)
      }
      def getTarget: _root_.scala.Predef.String = target.getOrElse("")
      def clearTarget: AuxMessageOptions = copy(target = _root_.scala.None)
      def withTarget(__v: _root_.scala.Predef.String): AuxMessageOptions = copy(target = Option(__v))
      def getOptions: scalapb.options.MessageOptions = options.getOrElse(scalapb.options.MessageOptions.defaultInstance)
      def clearOptions: AuxMessageOptions = copy(options = _root_.scala.None)
      def withOptions(__v: scalapb.options.MessageOptions): AuxMessageOptions = copy(options = Option(__v))
      def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
      def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => target.orNull
          case 2 => options.orNull
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => target.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 2 => options.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion = scalapb.options.ScalaPbOptions.AuxMessageOptions
  }
  
  object AuxMessageOptions extends scalapb.GeneratedMessageCompanion[scalapb.options.ScalaPbOptions.AuxMessageOptions] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scalapb.options.ScalaPbOptions.AuxMessageOptions] = this
    def merge(`_message__`: scalapb.options.ScalaPbOptions.AuxMessageOptions, `_input__`: _root_.com.google.protobuf.CodedInputStream): scalapb.options.ScalaPbOptions.AuxMessageOptions = {
      var __target = `_message__`.target
      var __options = `_message__`.options
      var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __target = Option(_input__.readStringRequireUtf8())
          case 18 =>
            __options = Option(_root_.scalapb.LiteParser.readMessage(_input__, __options.getOrElse(scalapb.options.MessageOptions.defaultInstance)))
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder(_message__.unknownFields)
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      scalapb.options.ScalaPbOptions.AuxMessageOptions(
          target = __target,
          options = __options,
          unknownFields = if (_unknownFields__ == null) _message__.unknownFields else _unknownFields__.result()
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[scalapb.options.ScalaPbOptions.AuxMessageOptions] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
        scalapb.options.ScalaPbOptions.AuxMessageOptions(
          target = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Predef.String]]),
          options = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[scalapb.options.MessageOptions]])
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = scalapb.options.ScalaPbOptions.javaDescriptor.getNestedTypes().get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = scalapb.options.ScalaPbOptions.scalaDescriptor.nestedMessages(0)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
      var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
      (__number: @_root_.scala.unchecked) match {
        case 2 => __out = scalapb.options.MessageOptions
      }
      __out
    }
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = scalapb.options.ScalaPbOptions.AuxMessageOptions(
      target = _root_.scala.None,
      options = _root_.scala.None
    )
    implicit class AuxMessageOptionsLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scalapb.options.ScalaPbOptions.AuxMessageOptions]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scalapb.options.ScalaPbOptions.AuxMessageOptions](_l) {
      def target: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getTarget)((c_, f_) => c_.copy(target = Option(f_)))
      def optionalTarget: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[_root_.scala.Predef.String]] = field(_.target)((c_, f_) => c_.copy(target = f_))
      def options: _root_.scalapb.lenses.Lens[UpperPB, scalapb.options.MessageOptions] = field(_.getOptions)((c_, f_) => c_.copy(options = Option(f_)))
      def optionalOptions: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[scalapb.options.MessageOptions]] = field(_.options)((c_, f_) => c_.copy(options = f_))
    }
    final val TARGET_FIELD_NUMBER = 1
    final val OPTIONS_FIELD_NUMBER = 2
    def of(
      target: _root_.scala.Option[_root_.scala.Predef.String],
      options: _root_.scala.Option[scalapb.options.MessageOptions]
    ): _root_.scalapb.options.ScalaPbOptions.AuxMessageOptions = _root_.scalapb.options.ScalaPbOptions.AuxMessageOptions(
      target,
      options
    )
    // @@protoc_insertion_point(GeneratedMessageCompanion[scalapb.ScalaPbOptions.AuxMessageOptions])
  }
  
  /** AuxFieldOptions enables you to set field-level options through package-scoped options.
    * This is useful when you can't add a dependency on scalapb.proto from the proto file that
    * defines the field.
    *
    * @param target
    *   The fully-qualified name of the field in the proto name space.
    * @param options
    *   Options to apply to the field. If there are any options defined on the target message
    *   they take precedence over the options.
    */
  @SerialVersionUID(0L)
  final case class AuxFieldOptions(
      target: _root_.scala.Option[_root_.scala.Predef.String] = _root_.scala.None,
      options: _root_.scala.Option[scalapb.options.FieldOptions] = _root_.scala.None,
      unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
      ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[AuxFieldOptions] {
      @transient
      private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
      private[this] def __computeSerializedValue(): _root_.scala.Int = {
        var __size = 0
        if (target.isDefined) {
          val __value = target.get
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
        };
        if (options.isDefined) {
          val __value = options.get
          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        };
        __size += unknownFields.serializedSize
        __size
      }
      override def serializedSize: _root_.scala.Int = {
        var read = __serializedSizeCachedValue
        if (read == 0) {
          read = __computeSerializedValue()
          __serializedSizeCachedValue = read
        }
        read
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        target.foreach { __v =>
          val __m = __v
          _output__.writeString(1, __m)
        };
        options.foreach { __v =>
          val __m = __v
          _output__.writeTag(2, 2)
          _output__.writeUInt32NoTag(__m.serializedSize)
          __m.writeTo(_output__)
        };
        unknownFields.writeTo(_output__)
      }
      def getTarget: _root_.scala.Predef.String = target.getOrElse("")
      def clearTarget: AuxFieldOptions = copy(target = _root_.scala.None)
      def withTarget(__v: _root_.scala.Predef.String): AuxFieldOptions = copy(target = Option(__v))
      def getOptions: scalapb.options.FieldOptions = options.getOrElse(scalapb.options.FieldOptions.defaultInstance)
      def clearOptions: AuxFieldOptions = copy(options = _root_.scala.None)
      def withOptions(__v: scalapb.options.FieldOptions): AuxFieldOptions = copy(options = Option(__v))
      def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
      def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => target.orNull
          case 2 => options.orNull
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => target.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 2 => options.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion = scalapb.options.ScalaPbOptions.AuxFieldOptions
  }
  
  object AuxFieldOptions extends scalapb.GeneratedMessageCompanion[scalapb.options.ScalaPbOptions.AuxFieldOptions] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scalapb.options.ScalaPbOptions.AuxFieldOptions] = this
    def merge(`_message__`: scalapb.options.ScalaPbOptions.AuxFieldOptions, `_input__`: _root_.com.google.protobuf.CodedInputStream): scalapb.options.ScalaPbOptions.AuxFieldOptions = {
      var __target = `_message__`.target
      var __options = `_message__`.options
      var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __target = Option(_input__.readStringRequireUtf8())
          case 18 =>
            __options = Option(_root_.scalapb.LiteParser.readMessage(_input__, __options.getOrElse(scalapb.options.FieldOptions.defaultInstance)))
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder(_message__.unknownFields)
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      scalapb.options.ScalaPbOptions.AuxFieldOptions(
          target = __target,
          options = __options,
          unknownFields = if (_unknownFields__ == null) _message__.unknownFields else _unknownFields__.result()
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[scalapb.options.ScalaPbOptions.AuxFieldOptions] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
        scalapb.options.ScalaPbOptions.AuxFieldOptions(
          target = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Predef.String]]),
          options = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[scalapb.options.FieldOptions]])
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = scalapb.options.ScalaPbOptions.javaDescriptor.getNestedTypes().get(1)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = scalapb.options.ScalaPbOptions.scalaDescriptor.nestedMessages(1)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
      var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
      (__number: @_root_.scala.unchecked) match {
        case 2 => __out = scalapb.options.FieldOptions
      }
      __out
    }
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = scalapb.options.ScalaPbOptions.AuxFieldOptions(
      target = _root_.scala.None,
      options = _root_.scala.None
    )
    implicit class AuxFieldOptionsLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scalapb.options.ScalaPbOptions.AuxFieldOptions]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scalapb.options.ScalaPbOptions.AuxFieldOptions](_l) {
      def target: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getTarget)((c_, f_) => c_.copy(target = Option(f_)))
      def optionalTarget: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[_root_.scala.Predef.String]] = field(_.target)((c_, f_) => c_.copy(target = f_))
      def options: _root_.scalapb.lenses.Lens[UpperPB, scalapb.options.FieldOptions] = field(_.getOptions)((c_, f_) => c_.copy(options = Option(f_)))
      def optionalOptions: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[scalapb.options.FieldOptions]] = field(_.options)((c_, f_) => c_.copy(options = f_))
    }
    final val TARGET_FIELD_NUMBER = 1
    final val OPTIONS_FIELD_NUMBER = 2
    def of(
      target: _root_.scala.Option[_root_.scala.Predef.String],
      options: _root_.scala.Option[scalapb.options.FieldOptions]
    ): _root_.scalapb.options.ScalaPbOptions.AuxFieldOptions = _root_.scalapb.options.ScalaPbOptions.AuxFieldOptions(
      target,
      options
    )
    // @@protoc_insertion_point(GeneratedMessageCompanion[scalapb.ScalaPbOptions.AuxFieldOptions])
  }
  
  /** AuxEnumOptions enables you to set enum-level options through package-scoped options.
    * This is useful when you can't add a dependency on scalapb.proto from the proto file that
    * defines the enum.
    *
    * @param target
    *   The fully-qualified name of the enum in the proto name space.
    * @param options
    *   Options to apply to the enum. If there are any options defined on the target message
    *   they take precedence over the options.
    */
  @SerialVersionUID(0L)
  final case class AuxEnumOptions(
      target: _root_.scala.Option[_root_.scala.Predef.String] = _root_.scala.None,
      options: _root_.scala.Option[scalapb.options.EnumOptions] = _root_.scala.None,
      unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
      ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[AuxEnumOptions] {
      @transient
      private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
      private[this] def __computeSerializedValue(): _root_.scala.Int = {
        var __size = 0
        if (target.isDefined) {
          val __value = target.get
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
        };
        if (options.isDefined) {
          val __value = options.get
          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        };
        __size += unknownFields.serializedSize
        __size
      }
      override def serializedSize: _root_.scala.Int = {
        var read = __serializedSizeCachedValue
        if (read == 0) {
          read = __computeSerializedValue()
          __serializedSizeCachedValue = read
        }
        read
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        target.foreach { __v =>
          val __m = __v
          _output__.writeString(1, __m)
        };
        options.foreach { __v =>
          val __m = __v
          _output__.writeTag(2, 2)
          _output__.writeUInt32NoTag(__m.serializedSize)
          __m.writeTo(_output__)
        };
        unknownFields.writeTo(_output__)
      }
      def getTarget: _root_.scala.Predef.String = target.getOrElse("")
      def clearTarget: AuxEnumOptions = copy(target = _root_.scala.None)
      def withTarget(__v: _root_.scala.Predef.String): AuxEnumOptions = copy(target = Option(__v))
      def getOptions: scalapb.options.EnumOptions = options.getOrElse(scalapb.options.EnumOptions.defaultInstance)
      def clearOptions: AuxEnumOptions = copy(options = _root_.scala.None)
      def withOptions(__v: scalapb.options.EnumOptions): AuxEnumOptions = copy(options = Option(__v))
      def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
      def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => target.orNull
          case 2 => options.orNull
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => target.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 2 => options.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion = scalapb.options.ScalaPbOptions.AuxEnumOptions
  }
  
  object AuxEnumOptions extends scalapb.GeneratedMessageCompanion[scalapb.options.ScalaPbOptions.AuxEnumOptions] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scalapb.options.ScalaPbOptions.AuxEnumOptions] = this
    def merge(`_message__`: scalapb.options.ScalaPbOptions.AuxEnumOptions, `_input__`: _root_.com.google.protobuf.CodedInputStream): scalapb.options.ScalaPbOptions.AuxEnumOptions = {
      var __target = `_message__`.target
      var __options = `_message__`.options
      var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __target = Option(_input__.readStringRequireUtf8())
          case 18 =>
            __options = Option(_root_.scalapb.LiteParser.readMessage(_input__, __options.getOrElse(scalapb.options.EnumOptions.defaultInstance)))
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder(_message__.unknownFields)
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      scalapb.options.ScalaPbOptions.AuxEnumOptions(
          target = __target,
          options = __options,
          unknownFields = if (_unknownFields__ == null) _message__.unknownFields else _unknownFields__.result()
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[scalapb.options.ScalaPbOptions.AuxEnumOptions] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
        scalapb.options.ScalaPbOptions.AuxEnumOptions(
          target = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Predef.String]]),
          options = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[scalapb.options.EnumOptions]])
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = scalapb.options.ScalaPbOptions.javaDescriptor.getNestedTypes().get(2)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = scalapb.options.ScalaPbOptions.scalaDescriptor.nestedMessages(2)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
      var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
      (__number: @_root_.scala.unchecked) match {
        case 2 => __out = scalapb.options.EnumOptions
      }
      __out
    }
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = scalapb.options.ScalaPbOptions.AuxEnumOptions(
      target = _root_.scala.None,
      options = _root_.scala.None
    )
    implicit class AuxEnumOptionsLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scalapb.options.ScalaPbOptions.AuxEnumOptions]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scalapb.options.ScalaPbOptions.AuxEnumOptions](_l) {
      def target: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getTarget)((c_, f_) => c_.copy(target = Option(f_)))
      def optionalTarget: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[_root_.scala.Predef.String]] = field(_.target)((c_, f_) => c_.copy(target = f_))
      def options: _root_.scalapb.lenses.Lens[UpperPB, scalapb.options.EnumOptions] = field(_.getOptions)((c_, f_) => c_.copy(options = Option(f_)))
      def optionalOptions: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[scalapb.options.EnumOptions]] = field(_.options)((c_, f_) => c_.copy(options = f_))
    }
    final val TARGET_FIELD_NUMBER = 1
    final val OPTIONS_FIELD_NUMBER = 2
    def of(
      target: _root_.scala.Option[_root_.scala.Predef.String],
      options: _root_.scala.Option[scalapb.options.EnumOptions]
    ): _root_.scalapb.options.ScalaPbOptions.AuxEnumOptions = _root_.scalapb.options.ScalaPbOptions.AuxEnumOptions(
      target,
      options
    )
    // @@protoc_insertion_point(GeneratedMessageCompanion[scalapb.ScalaPbOptions.AuxEnumOptions])
  }
  
  implicit class ScalaPbOptionsLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scalapb.options.ScalaPbOptions]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scalapb.options.ScalaPbOptions](_l) {
    def packageName: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getPackageName)((c_, f_) => c_.copy(packageName = Option(f_)))
    def optionalPackageName: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[_root_.scala.Predef.String]] = field(_.packageName)((c_, f_) => c_.copy(packageName = f_))
    def flatPackage: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.getFlatPackage)((c_, f_) => c_.copy(flatPackage = Option(f_)))
    def optionalFlatPackage: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[_root_.scala.Boolean]] = field(_.flatPackage)((c_, f_) => c_.copy(flatPackage = f_))
    def `import`: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Predef.String]] = field(_.`import`)((c_, f_) => c_.copy(`import` = f_))
    def preamble: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Predef.String]] = field(_.preamble)((c_, f_) => c_.copy(preamble = f_))
    def singleFile: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.getSingleFile)((c_, f_) => c_.copy(singleFile = Option(f_)))
    def optionalSingleFile: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[_root_.scala.Boolean]] = field(_.singleFile)((c_, f_) => c_.copy(singleFile = f_))
    def noPrimitiveWrappers: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.getNoPrimitiveWrappers)((c_, f_) => c_.copy(noPrimitiveWrappers = Option(f_)))
    def optionalNoPrimitiveWrappers: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[_root_.scala.Boolean]] = field(_.noPrimitiveWrappers)((c_, f_) => c_.copy(noPrimitiveWrappers = f_))
    def primitiveWrappers: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.getPrimitiveWrappers)((c_, f_) => c_.copy(primitiveWrappers = Option(f_)))
    def optionalPrimitiveWrappers: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[_root_.scala.Boolean]] = field(_.primitiveWrappers)((c_, f_) => c_.copy(primitiveWrappers = f_))
    def collectionType: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getCollectionType)((c_, f_) => c_.copy(collectionType = Option(f_)))
    def optionalCollectionType: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[_root_.scala.Predef.String]] = field(_.collectionType)((c_, f_) => c_.copy(collectionType = f_))
    def preserveUnknownFields: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.getPreserveUnknownFields)((c_, f_) => c_.copy(preserveUnknownFields = Option(f_)))
    def optionalPreserveUnknownFields: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[_root_.scala.Boolean]] = field(_.preserveUnknownFields)((c_, f_) => c_.copy(preserveUnknownFields = f_))
    def objectName: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getObjectName)((c_, f_) => c_.copy(objectName = Option(f_)))
    def optionalObjectName: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[_root_.scala.Predef.String]] = field(_.objectName)((c_, f_) => c_.copy(objectName = f_))
    def scope: _root_.scalapb.lenses.Lens[UpperPB, scalapb.options.ScalaPbOptions.OptionsScope] = field(_.getScope)((c_, f_) => c_.copy(scope = Option(f_)))
    def optionalScope: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[scalapb.options.ScalaPbOptions.OptionsScope]] = field(_.scope)((c_, f_) => c_.copy(scope = f_))
    def lenses: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.getLenses)((c_, f_) => c_.copy(lenses = Option(f_)))
    def optionalLenses: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[_root_.scala.Boolean]] = field(_.lenses)((c_, f_) => c_.copy(lenses = f_))
    def retainSourceCodeInfo: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.getRetainSourceCodeInfo)((c_, f_) => c_.copy(retainSourceCodeInfo = Option(f_)))
    def optionalRetainSourceCodeInfo: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[_root_.scala.Boolean]] = field(_.retainSourceCodeInfo)((c_, f_) => c_.copy(retainSourceCodeInfo = f_))
    def mapType: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getMapType)((c_, f_) => c_.copy(mapType = Option(f_)))
    def optionalMapType: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[_root_.scala.Predef.String]] = field(_.mapType)((c_, f_) => c_.copy(mapType = f_))
    def noDefaultValuesInConstructor: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.getNoDefaultValuesInConstructor)((c_, f_) => c_.copy(noDefaultValuesInConstructor = Option(f_)))
    def optionalNoDefaultValuesInConstructor: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[_root_.scala.Boolean]] = field(_.noDefaultValuesInConstructor)((c_, f_) => c_.copy(noDefaultValuesInConstructor = f_))
    def enumValueNaming: _root_.scalapb.lenses.Lens[UpperPB, scalapb.options.ScalaPbOptions.EnumValueNaming] = field(_.getEnumValueNaming)((c_, f_) => c_.copy(enumValueNaming = Option(f_)))
    def optionalEnumValueNaming: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[scalapb.options.ScalaPbOptions.EnumValueNaming]] = field(_.enumValueNaming)((c_, f_) => c_.copy(enumValueNaming = f_))
    def enumStripPrefix: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.getEnumStripPrefix)((c_, f_) => c_.copy(enumStripPrefix = Option(f_)))
    def optionalEnumStripPrefix: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[_root_.scala.Boolean]] = field(_.enumStripPrefix)((c_, f_) => c_.copy(enumStripPrefix = f_))
    def auxMessageOptions: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[scalapb.options.ScalaPbOptions.AuxMessageOptions]] = field(_.auxMessageOptions)((c_, f_) => c_.copy(auxMessageOptions = f_))
    def auxFieldOptions: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[scalapb.options.ScalaPbOptions.AuxFieldOptions]] = field(_.auxFieldOptions)((c_, f_) => c_.copy(auxFieldOptions = f_))
    def auxEnumOptions: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[scalapb.options.ScalaPbOptions.AuxEnumOptions]] = field(_.auxEnumOptions)((c_, f_) => c_.copy(auxEnumOptions = f_))
    def bytesType: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getBytesType)((c_, f_) => c_.copy(bytesType = Option(f_)))
    def optionalBytesType: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[_root_.scala.Predef.String]] = field(_.bytesType)((c_, f_) => c_.copy(bytesType = f_))
    def testOnlyNoJavaConversions: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.getTestOnlyNoJavaConversions)((c_, f_) => c_.copy(testOnlyNoJavaConversions = Option(f_)))
    def optionalTestOnlyNoJavaConversions: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[_root_.scala.Boolean]] = field(_.testOnlyNoJavaConversions)((c_, f_) => c_.copy(testOnlyNoJavaConversions = f_))
  }
  final val PACKAGE_NAME_FIELD_NUMBER = 1
  final val FLAT_PACKAGE_FIELD_NUMBER = 2
  final val IMPORT_FIELD_NUMBER = 3
  final val PREAMBLE_FIELD_NUMBER = 4
  final val SINGLE_FILE_FIELD_NUMBER = 5
  final val NO_PRIMITIVE_WRAPPERS_FIELD_NUMBER = 7
  final val PRIMITIVE_WRAPPERS_FIELD_NUMBER = 6
  final val COLLECTION_TYPE_FIELD_NUMBER = 8
  final val PRESERVE_UNKNOWN_FIELDS_FIELD_NUMBER = 9
  final val OBJECT_NAME_FIELD_NUMBER = 10
  final val SCOPE_FIELD_NUMBER = 11
  final val LENSES_FIELD_NUMBER = 12
  final val RETAIN_SOURCE_CODE_INFO_FIELD_NUMBER = 13
  final val MAP_TYPE_FIELD_NUMBER = 14
  final val NO_DEFAULT_VALUES_IN_CONSTRUCTOR_FIELD_NUMBER = 15
  final val ENUM_VALUE_NAMING_FIELD_NUMBER = 16
  final val ENUM_STRIP_PREFIX_FIELD_NUMBER = 17
  final val AUX_MESSAGE_OPTIONS_FIELD_NUMBER = 18
  final val AUX_FIELD_OPTIONS_FIELD_NUMBER = 19
  final val AUX_ENUM_OPTIONS_FIELD_NUMBER = 20
  final val BYTES_TYPE_FIELD_NUMBER = 21
  final val TEST_ONLY_NO_JAVA_CONVERSIONS_FIELD_NUMBER = 100001
  def of(
    packageName: _root_.scala.Option[_root_.scala.Predef.String],
    flatPackage: _root_.scala.Option[_root_.scala.Boolean],
    `import`: _root_.scala.Seq[_root_.scala.Predef.String],
    preamble: _root_.scala.Seq[_root_.scala.Predef.String],
    singleFile: _root_.scala.Option[_root_.scala.Boolean],
    noPrimitiveWrappers: _root_.scala.Option[_root_.scala.Boolean],
    primitiveWrappers: _root_.scala.Option[_root_.scala.Boolean],
    collectionType: _root_.scala.Option[_root_.scala.Predef.String],
    preserveUnknownFields: _root_.scala.Option[_root_.scala.Boolean],
    objectName: _root_.scala.Option[_root_.scala.Predef.String],
    scope: _root_.scala.Option[scalapb.options.ScalaPbOptions.OptionsScope],
    lenses: _root_.scala.Option[_root_.scala.Boolean],
    retainSourceCodeInfo: _root_.scala.Option[_root_.scala.Boolean],
    mapType: _root_.scala.Option[_root_.scala.Predef.String],
    noDefaultValuesInConstructor: _root_.scala.Option[_root_.scala.Boolean],
    enumValueNaming: _root_.scala.Option[scalapb.options.ScalaPbOptions.EnumValueNaming],
    enumStripPrefix: _root_.scala.Option[_root_.scala.Boolean],
    auxMessageOptions: _root_.scala.Seq[scalapb.options.ScalaPbOptions.AuxMessageOptions],
    auxFieldOptions: _root_.scala.Seq[scalapb.options.ScalaPbOptions.AuxFieldOptions],
    auxEnumOptions: _root_.scala.Seq[scalapb.options.ScalaPbOptions.AuxEnumOptions],
    bytesType: _root_.scala.Option[_root_.scala.Predef.String],
    testOnlyNoJavaConversions: _root_.scala.Option[_root_.scala.Boolean]
  ): _root_.scalapb.options.ScalaPbOptions = _root_.scalapb.options.ScalaPbOptions(
    packageName,
    flatPackage,
    `import`,
    preamble,
    singleFile,
    noPrimitiveWrappers,
    primitiveWrappers,
    collectionType,
    preserveUnknownFields,
    objectName,
    scope,
    lenses,
    retainSourceCodeInfo,
    mapType,
    noDefaultValuesInConstructor,
    enumValueNaming,
    enumStripPrefix,
    auxMessageOptions,
    auxFieldOptions,
    auxEnumOptions,
    bytesType,
    testOnlyNoJavaConversions
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[scalapb.ScalaPbOptions])
}
