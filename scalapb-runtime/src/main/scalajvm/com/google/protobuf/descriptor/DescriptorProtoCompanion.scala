// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!

package com.google.protobuf.descriptor

object DescriptorProtoCompanion extends _root_.scalapb.GeneratedFileObject {
  lazy val dependencies: Seq[_root_.scalapb.GeneratedFileObject] = Seq.empty
  lazy val messagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] =
    Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]](
      com.google.protobuf.descriptor.FileDescriptorSet,
      com.google.protobuf.descriptor.FileDescriptorProto,
      com.google.protobuf.descriptor.DescriptorProto,
      com.google.protobuf.descriptor.ExtensionRangeOptions,
      com.google.protobuf.descriptor.FieldDescriptorProto,
      com.google.protobuf.descriptor.OneofDescriptorProto,
      com.google.protobuf.descriptor.EnumDescriptorProto,
      com.google.protobuf.descriptor.EnumValueDescriptorProto,
      com.google.protobuf.descriptor.ServiceDescriptorProto,
      com.google.protobuf.descriptor.MethodDescriptorProto,
      com.google.protobuf.descriptor.FileOptions,
      com.google.protobuf.descriptor.MessageOptions,
      com.google.protobuf.descriptor.FieldOptions,
      com.google.protobuf.descriptor.OneofOptions,
      com.google.protobuf.descriptor.EnumOptions,
      com.google.protobuf.descriptor.EnumValueOptions,
      com.google.protobuf.descriptor.ServiceOptions,
      com.google.protobuf.descriptor.MethodOptions,
      com.google.protobuf.descriptor.UninterpretedOption,
      com.google.protobuf.descriptor.FeatureSet,
      com.google.protobuf.descriptor.FeatureSetDefaults,
      com.google.protobuf.descriptor.SourceCodeInfo,
      com.google.protobuf.descriptor.GeneratedCodeInfo
    )
  private lazy val ProtoBytes: _root_.scala.Array[Byte] =
      scalapb.Encoding.fromBase64(scala.collection.immutable.Seq(
  """CiBnb29nbGUvcHJvdG9idWYvZGVzY3JpcHRvci5wcm90bxIPZ29vZ2xlLnByb3RvYnVmImYKEUZpbGVEZXNjcmlwdG9yU2V0E
  kMKBGZpbGUYASADKAsyJC5nb29nbGUucHJvdG9idWYuRmlsZURlc2NyaXB0b3JQcm90b0IJ4j8GEgRmaWxlUgRmaWxlKgwIgOzK/
  wEQgezK/wEirwcKE0ZpbGVEZXNjcmlwdG9yUHJvdG8SHQoEbmFtZRgBIAEoCUIJ4j8GEgRuYW1lUgRuYW1lEiYKB3BhY2thZ2UYA
  iABKAlCDOI/CRIHcGFja2FnZVIHcGFja2FnZRIvCgpkZXBlbmRlbmN5GAMgAygJQg/iPwwSCmRlcGVuZGVuY3lSCmRlcGVuZGVuY
  3kSQgoRcHVibGljX2RlcGVuZGVuY3kYCiADKAVCFeI/EhIQcHVibGljRGVwZW5kZW5jeVIQcHVibGljRGVwZW5kZW5jeRI8Cg93Z
  WFrX2RlcGVuZGVuY3kYCyADKAVCE+I/EBIOd2Vha0RlcGVuZGVuY3lSDndlYWtEZXBlbmRlbmN5EkIKEW9wdGlvbl9kZXBlbmRlb
  mN5GA8gAygJQhXiPxISEG9wdGlvbkRlcGVuZGVuY3lSEG9wdGlvbkRlcGVuZGVuY3kSVQoMbWVzc2FnZV90eXBlGAQgAygLMiAuZ
  29vZ2xlLnByb3RvYnVmLkRlc2NyaXB0b3JQcm90b0IQ4j8NEgttZXNzYWdlVHlwZVILbWVzc2FnZVR5cGUSUAoJZW51bV90eXBlG
  AUgAygLMiQuZ29vZ2xlLnByb3RvYnVmLkVudW1EZXNjcmlwdG9yUHJvdG9CDeI/ChIIZW51bVR5cGVSCGVudW1UeXBlEk8KB3Nlc
  nZpY2UYBiADKAsyJy5nb29nbGUucHJvdG9idWYuU2VydmljZURlc2NyaXB0b3JQcm90b0IM4j8JEgdzZXJ2aWNlUgdzZXJ2aWNlE
  lMKCWV4dGVuc2lvbhgHIAMoCzIlLmdvb2dsZS5wcm90b2J1Zi5GaWVsZERlc2NyaXB0b3JQcm90b0IO4j8LEglleHRlbnNpb25SC
  WV4dGVuc2lvbhJECgdvcHRpb25zGAggASgLMhwuZ29vZ2xlLnByb3RvYnVmLkZpbGVPcHRpb25zQgziPwkSB29wdGlvbnNSB29wd
  GlvbnMSXgoQc291cmNlX2NvZGVfaW5mbxgJIAEoCzIfLmdvb2dsZS5wcm90b2J1Zi5Tb3VyY2VDb2RlSW5mb0IT4j8QEg5zb3VyY
  2VDb2RlSW5mb1IOc291cmNlQ29kZUluZm8SIwoGc3ludGF4GAwgASgJQgviPwgSBnN5bnRheFIGc3ludGF4EkAKB2VkaXRpb24YD
  iABKA4yGC5nb29nbGUucHJvdG9idWYuRWRpdGlvbkIM4j8JEgdlZGl0aW9uUgdlZGl0aW9uIukICg9EZXNjcmlwdG9yUHJvdG8SH
  QoEbmFtZRgBIAEoCUIJ4j8GEgRuYW1lUgRuYW1lEkcKBWZpZWxkGAIgAygLMiUuZ29vZ2xlLnByb3RvYnVmLkZpZWxkRGVzY3Jpc
  HRvclByb3RvQgriPwcSBWZpZWxkUgVmaWVsZBJTCglleHRlbnNpb24YBiADKAsyJS5nb29nbGUucHJvdG9idWYuRmllbGREZXNjc
  mlwdG9yUHJvdG9CDuI/CxIJZXh0ZW5zaW9uUglleHRlbnNpb24SUgoLbmVzdGVkX3R5cGUYAyADKAsyIC5nb29nbGUucHJvdG9id
  WYuRGVzY3JpcHRvclByb3RvQg/iPwwSCm5lc3RlZFR5cGVSCm5lc3RlZFR5cGUSUAoJZW51bV90eXBlGAQgAygLMiQuZ29vZ2xlL
  nByb3RvYnVmLkVudW1EZXNjcmlwdG9yUHJvdG9CDeI/ChIIZW51bVR5cGVSCGVudW1UeXBlEm0KD2V4dGVuc2lvbl9yYW5nZRgFI
  AMoCzIvLmdvb2dsZS5wcm90b2J1Zi5EZXNjcmlwdG9yUHJvdG8uRXh0ZW5zaW9uUmFuZ2VCE+I/EBIOZXh0ZW5zaW9uUmFuZ2VSD
  mV4dGVuc2lvblJhbmdlElQKCm9uZW9mX2RlY2wYCCADKAsyJS5nb29nbGUucHJvdG9idWYuT25lb2ZEZXNjcmlwdG9yUHJvdG9CD
  uI/CxIJb25lb2ZEZWNsUglvbmVvZkRlY2wSRwoHb3B0aW9ucxgHIAEoCzIfLmdvb2dsZS5wcm90b2J1Zi5NZXNzYWdlT3B0aW9uc
  0IM4j8JEgdvcHRpb25zUgdvcHRpb25zEmkKDnJlc2VydmVkX3JhbmdlGAkgAygLMi4uZ29vZ2xlLnByb3RvYnVmLkRlc2NyaXB0b
  3JQcm90by5SZXNlcnZlZFJhbmdlQhLiPw8SDXJlc2VydmVkUmFuZ2VSDXJlc2VydmVkUmFuZ2USNgoNcmVzZXJ2ZWRfbmFtZRgKI
  AMoCUIR4j8OEgxyZXNlcnZlZE5hbWVSDHJlc2VydmVkTmFtZRJSCgp2aXNpYmlsaXR5GAsgASgOMiEuZ29vZ2xlLnByb3RvYnVmL
  lN5bWJvbFZpc2liaWxpdHlCD+I/DBIKdmlzaWJpbGl0eVIKdmlzaWJpbGl0eRqeAQoORXh0ZW5zaW9uUmFuZ2USIAoFc3RhcnQYA
  SABKAVCCuI/BxIFc3RhcnRSBXN0YXJ0EhoKA2VuZBgCIAEoBUII4j8FEgNlbmRSA2VuZBJOCgdvcHRpb25zGAMgASgLMiYuZ29vZ
  2xlLnByb3RvYnVmLkV4dGVuc2lvblJhbmdlT3B0aW9uc0IM4j8JEgdvcHRpb25zUgdvcHRpb25zGk0KDVJlc2VydmVkUmFuZ2USI
  AoFc3RhcnQYASABKAVCCuI/BxIFc3RhcnRSBXN0YXJ0EhoKA2VuZBgCIAEoBUII4j8FEgNlbmRSA2VuZCL+BQoVRXh0ZW5zaW9uU
  mFuZ2VPcHRpb25zEnIKFHVuaW50ZXJwcmV0ZWRfb3B0aW9uGOcHIAMoCzIkLmdvb2dsZS5wcm90b2J1Zi5VbmludGVycHJldGVkT
  3B0aW9uQhjiPxUSE3VuaW50ZXJwcmV0ZWRPcHRpb25SE3VuaW50ZXJwcmV0ZWRPcHRpb24SaQoLZGVjbGFyYXRpb24YAiADKAsyM
  i5nb29nbGUucHJvdG9idWYuRXh0ZW5zaW9uUmFuZ2VPcHRpb25zLkRlY2xhcmF0aW9uQhOIAQLiPw0SC2RlY2xhcmF0aW9uUgtkZ
  WNsYXJhdGlvbhJGCghmZWF0dXJlcxgyIAEoCzIbLmdvb2dsZS5wcm90b2J1Zi5GZWF0dXJlU2V0Qg3iPwoSCGZlYXR1cmVzUghmZ
  WF0dXJlcxJ+Cgx2ZXJpZmljYXRpb24YAyABKA4yOC5nb29nbGUucHJvdG9idWYuRXh0ZW5zaW9uUmFuZ2VPcHRpb25zLlZlcmlma
  WNhdGlvblN0YXRlOgpVTlZFUklGSUVEQhSIAQLiPw4SDHZlcmlmaWNhdGlvblIMdmVyaWZpY2F0aW9uGtkBCgtEZWNsYXJhdGlvb
  hIjCgZudW1iZXIYASABKAVCC+I/CBIGbnVtYmVyUgZudW1iZXISKgoJZnVsbF9uYW1lGAIgASgJQg3iPwoSCGZ1bGxOYW1lUghmd
  WxsTmFtZRIdCgR0eXBlGAMgASgJQgniPwYSBHR5cGVSBHR5cGUSKQoIcmVzZXJ2ZWQYBSABKAhCDeI/ChIIcmVzZXJ2ZWRSCHJlc
  2VydmVkEikKCHJlcGVhdGVkGAYgASgIQg3iPwoSCHJlcGVhdGVkUghyZXBlYXRlZEoECAQQBSJXChFWZXJpZmljYXRpb25TdGF0Z
  RIhCgtERUNMQVJBVElPThAAGhDiPw0SC0RFQ0xBUkFUSU9OEh8KClVOVkVSSUZJRUQQARoP4j8MEgpVTlZFUklGSUVEKgkI6AcQg
  ICAgAIi5goKFEZpZWxkRGVzY3JpcHRvclByb3RvEh0KBG5hbWUYASABKAlCCeI/BhIEbmFtZVIEbmFtZRIjCgZudW1iZXIYAyABK
  AVCC+I/CBIGbnVtYmVyUgZudW1iZXISTQoFbGFiZWwYBCABKA4yKy5nb29nbGUucHJvdG9idWYuRmllbGREZXNjcmlwdG9yUHJvd
  G8uTGFiZWxCCuI/BxIFbGFiZWxSBWxhYmVsEkkKBHR5cGUYBSABKA4yKi5nb29nbGUucHJvdG9idWYuRmllbGREZXNjcmlwdG9yU
  HJvdG8uVHlwZUIJ4j8GEgR0eXBlUgR0eXBlEioKCXR5cGVfbmFtZRgGIAEoCUIN4j8KEgh0eXBlTmFtZVIIdHlwZU5hbWUSKQoIZ
  Xh0ZW5kZWUYAiABKAlCDeI/ChIIZXh0ZW5kZWVSCGV4dGVuZGVlEjYKDWRlZmF1bHRfdmFsdWUYByABKAlCEeI/DhIMZGVmYXVsd
  FZhbHVlUgxkZWZhdWx0VmFsdWUSMAoLb25lb2ZfaW5kZXgYCSABKAVCD+I/DBIKb25lb2ZJbmRleFIKb25lb2ZJbmRleBIqCglqc
  29uX25hbWUYCiABKAlCDeI/ChIIanNvbk5hbWVSCGpzb25OYW1lEkUKB29wdGlvbnMYCCABKAsyHS5nb29nbGUucHJvdG9idWYuR
  mllbGRPcHRpb25zQgziPwkSB29wdGlvbnNSB29wdGlvbnMSPAoPcHJvdG8zX29wdGlvbmFsGBEgASgIQhPiPxASDnByb3RvM09wd
  GlvbmFsUg5wcm90bzNPcHRpb25hbCL4BAoEVHlwZRIhCgtUWVBFX0RPVUJMRRABGhDiPw0SC1RZUEVfRE9VQkxFEh8KClRZUEVfR
  kxPQVQQAhoP4j8MEgpUWVBFX0ZMT0FUEh8KClRZUEVfSU5UNjQQAxoP4j8MEgpUWVBFX0lOVDY0EiEKC1RZUEVfVUlOVDY0EAQaE
  OI/DRILVFlQRV9VSU5UNjQSHwoKVFlQRV9JTlQzMhAFGg/iPwwSClRZUEVfSU5UMzISIwoMVFlQRV9GSVhFRDY0EAYaEeI/DhIMV
  FlQRV9GSVhFRDY0EiMKDFRZUEVfRklYRUQzMhAHGhHiPw4SDFRZUEVfRklYRUQzMhIdCglUWVBFX0JPT0wQCBoO4j8LEglUWVBFX
  0JPT0wSIQoLVFlQRV9TVFJJTkcQCRoQ4j8NEgtUWVBFX1NUUklORxIfCgpUWVBFX0dST1VQEAoaD+I/DBIKVFlQRV9HUk9VUBIjC
  gxUWVBFX01FU1NBR0UQCxoR4j8OEgxUWVBFX01FU1NBR0USHwoKVFlQRV9CWVRFUxAMGg/iPwwSClRZUEVfQllURVMSIQoLVFlQR
  V9VSU5UMzIQDRoQ4j8NEgtUWVBFX1VJTlQzMhIdCglUWVBFX0VOVU0QDhoO4j8LEglUWVBFX0VOVU0SJQoNVFlQRV9TRklYRUQzM
  hAPGhLiPw8SDVRZUEVfU0ZJWEVEMzISJQoNVFlQRV9TRklYRUQ2NBAQGhLiPw8SDVRZUEVfU0ZJWEVENjQSIQoLVFlQRV9TSU5UM
  zIQERoQ4j8NEgtUWVBFX1NJTlQzMhIhCgtUWVBFX1NJTlQ2NBASGhDiPw0SC1RZUEVfU0lOVDY0IoIBCgVMYWJlbBInCg5MQUJFT
  F9PUFRJT05BTBABGhPiPxASDkxBQkVMX09QVElPTkFMEicKDkxBQkVMX1JFUEVBVEVEEAMaE+I/EBIOTEFCRUxfUkVQRUFURUQSJ
  woOTEFCRUxfUkVRVUlSRUQQAhoT4j8QEg5MQUJFTF9SRVFVSVJFRCJ8ChRPbmVvZkRlc2NyaXB0b3JQcm90bxIdCgRuYW1lGAEgA
  SgJQgniPwYSBG5hbWVSBG5hbWUSRQoHb3B0aW9ucxgCIAEoCzIdLmdvb2dsZS5wcm90b2J1Zi5PbmVvZk9wdGlvbnNCDOI/CRIHb
  3B0aW9uc1IHb3B0aW9ucyKZBAoTRW51bURlc2NyaXB0b3JQcm90bxIdCgRuYW1lGAEgASgJQgniPwYSBG5hbWVSBG5hbWUSSwoFd
  mFsdWUYAiADKAsyKS5nb29nbGUucHJvdG9idWYuRW51bVZhbHVlRGVzY3JpcHRvclByb3RvQgriPwcSBXZhbHVlUgV2YWx1ZRJEC
  gdvcHRpb25zGAMgASgLMhwuZ29vZ2xlLnByb3RvYnVmLkVudW1PcHRpb25zQgziPwkSB29wdGlvbnNSB29wdGlvbnMScQoOcmVzZ
  XJ2ZWRfcmFuZ2UYBCADKAsyNi5nb29nbGUucHJvdG9idWYuRW51bURlc2NyaXB0b3JQcm90by5FbnVtUmVzZXJ2ZWRSYW5nZUIS4
  j8PEg1yZXNlcnZlZFJhbmdlUg1yZXNlcnZlZFJhbmdlEjYKDXJlc2VydmVkX25hbWUYBSADKAlCEeI/DhIMcmVzZXJ2ZWROYW1lU
  gxyZXNlcnZlZE5hbWUSUgoKdmlzaWJpbGl0eRgGIAEoDjIhLmdvb2dsZS5wcm90b2J1Zi5TeW1ib2xWaXNpYmlsaXR5Qg/iPwwSC
  nZpc2liaWxpdHlSCnZpc2liaWxpdHkaUQoRRW51bVJlc2VydmVkUmFuZ2USIAoFc3RhcnQYASABKAVCCuI/BxIFc3RhcnRSBXN0Y
  XJ0EhoKA2VuZBgCIAEoBUII4j8FEgNlbmRSA2VuZCKpAQoYRW51bVZhbHVlRGVzY3JpcHRvclByb3RvEh0KBG5hbWUYASABKAlCC
  eI/BhIEbmFtZVIEbmFtZRIjCgZudW1iZXIYAiABKAVCC+I/CBIGbnVtYmVyUgZudW1iZXISSQoHb3B0aW9ucxgDIAEoCzIhLmdvb
  2dsZS5wcm90b2J1Zi5FbnVtVmFsdWVPcHRpb25zQgziPwkSB29wdGlvbnNSB29wdGlvbnMizQEKFlNlcnZpY2VEZXNjcmlwdG9yU
  HJvdG8SHQoEbmFtZRgBIAEoCUIJ4j8GEgRuYW1lUgRuYW1lEksKBm1ldGhvZBgCIAMoCzImLmdvb2dsZS5wcm90b2J1Zi5NZXRob
  2REZXNjcmlwdG9yUHJvdG9CC+I/CBIGbWV0aG9kUgZtZXRob2QSRwoHb3B0aW9ucxgDIAEoCzIfLmdvb2dsZS5wcm90b2J1Zi5TZ
  XJ2aWNlT3B0aW9uc0IM4j8JEgdvcHRpb25zUgdvcHRpb25zIu8CChVNZXRob2REZXNjcmlwdG9yUHJvdG8SHQoEbmFtZRgBIAEoC
  UIJ4j8GEgRuYW1lUgRuYW1lEi0KCmlucHV0X3R5cGUYAiABKAlCDuI/CxIJaW5wdXRUeXBlUglpbnB1dFR5cGUSMAoLb3V0cHV0X
  3R5cGUYAyABKAlCD+I/DBIKb3V0cHV0VHlwZVIKb3V0cHV0VHlwZRJGCgdvcHRpb25zGAQgASgLMh4uZ29vZ2xlLnByb3RvYnVmL
  k1ldGhvZE9wdGlvbnNCDOI/CRIHb3B0aW9uc1IHb3B0aW9ucxJGChBjbGllbnRfc3RyZWFtaW5nGAUgASgIOgVmYWxzZUIU4j8RE
  g9jbGllbnRTdHJlYW1pbmdSD2NsaWVudFN0cmVhbWluZxJGChBzZXJ2ZXJfc3RyZWFtaW5nGAYgASgIOgVmYWxzZUIU4j8REg9zZ
  XJ2ZXJTdHJlYW1pbmdSD3NlcnZlclN0cmVhbWluZyKlDQoLRmlsZU9wdGlvbnMSMwoMamF2YV9wYWNrYWdlGAEgASgJQhDiPw0SC
  2phdmFQYWNrYWdlUgtqYXZhUGFja2FnZRJJChRqYXZhX291dGVyX2NsYXNzbmFtZRgIIAEoCUIX4j8UEhJqYXZhT3V0ZXJDbGFzc
  25hbWVSEmphdmFPdXRlckNsYXNzbmFtZRJNChNqYXZhX211bHRpcGxlX2ZpbGVzGAogASgIOgVmYWxzZUIW4j8TEhFqYXZhTXVsd
  GlwbGVGaWxlc1IRamF2YU11bHRpcGxlRmlsZXMSYgodamF2YV9nZW5lcmF0ZV9lcXVhbHNfYW5kX2hhc2gYFCABKAhCIBgB4j8bE
  hlqYXZhR2VuZXJhdGVFcXVhbHNBbmRIYXNoUhlqYXZhR2VuZXJhdGVFcXVhbHNBbmRIYXNoElQKFmphdmFfc3RyaW5nX2NoZWNrX
  3V0ZjgYGyABKAg6BWZhbHNlQhjiPxUSE2phdmFTdHJpbmdDaGVja1V0ZjhSE2phdmFTdHJpbmdDaGVja1V0ZjgSZQoMb3B0aW1pe
  mVfZm9yGAkgASgOMikuZ29vZ2xlLnByb3RvYnVmLkZpbGVPcHRpb25zLk9wdGltaXplTW9kZToFU1BFRURCEOI/DRILb3B0aW1pe
  mVGb3JSC29wdGltaXplRm9yEi0KCmdvX3BhY2thZ2UYCyABKAlCDuI/CxIJZ29QYWNrYWdlUglnb1BhY2thZ2USTQoTY2NfZ2VuZ
  XJpY19zZXJ2aWNlcxgQIAEoCDoFZmFsc2VCFuI/ExIRY2NHZW5lcmljU2VydmljZXNSEWNjR2VuZXJpY1NlcnZpY2VzElMKFWphd
  mFfZ2VuZXJpY19zZXJ2aWNlcxgRIAEoCDoFZmFsc2VCGOI/FRITamF2YUdlbmVyaWNTZXJ2aWNlc1ITamF2YUdlbmVyaWNTZXJ2a
  WNlcxJNChNweV9nZW5lcmljX3NlcnZpY2VzGBIgASgIOgVmYWxzZUIW4j8TEhFweUdlbmVyaWNTZXJ2aWNlc1IRcHlHZW5lcmljU
  2VydmljZXMSNgoKZGVwcmVjYXRlZBgXIAEoCDoFZmFsc2VCD+I/DBIKZGVwcmVjYXRlZFIKZGVwcmVjYXRlZBJDChBjY19lbmFib
  GVfYXJlbmFzGB8gASgIOgR0cnVlQhPiPxASDmNjRW5hYmxlQXJlbmFzUg5jY0VuYWJsZUFyZW5hcxJAChFvYmpjX2NsYXNzX3ByZ
  WZpeBgkIAEoCUIU4j8REg9vYmpjQ2xhc3NQcmVmaXhSD29iamNDbGFzc1ByZWZpeBI/ChBjc2hhcnBfbmFtZXNwYWNlGCUgASgJQ
  hTiPxESD2NzaGFycE5hbWVzcGFjZVIPY3NoYXJwTmFtZXNwYWNlEjMKDHN3aWZ0X3ByZWZpeBgnIAEoCUIQ4j8NEgtzd2lmdFByZ
  WZpeFILc3dpZnRQcmVmaXgSPQoQcGhwX2NsYXNzX3ByZWZpeBgoIAEoCUIT4j8QEg5waHBDbGFzc1ByZWZpeFIOcGhwQ2xhc3NQc
  mVmaXgSNgoNcGhwX25hbWVzcGFjZRgpIAEoCUIR4j8OEgxwaHBOYW1lc3BhY2VSDHBocE5hbWVzcGFjZRJPChZwaHBfbWV0YWRhd
  GFfbmFtZXNwYWNlGCwgASgJQhniPxYSFHBocE1ldGFkYXRhTmFtZXNwYWNlUhRwaHBNZXRhZGF0YU5hbWVzcGFjZRIzCgxydWJ5X
  3BhY2thZ2UYLSABKAlCEOI/DRILcnVieVBhY2thZ2VSC3J1YnlQYWNrYWdlEkYKCGZlYXR1cmVzGDIgASgLMhsuZ29vZ2xlLnByb
  3RvYnVmLkZlYXR1cmVTZXRCDeI/ChIIZmVhdHVyZXNSCGZlYXR1cmVzEnIKFHVuaW50ZXJwcmV0ZWRfb3B0aW9uGOcHIAMoCzIkL
  mdvb2dsZS5wcm90b2J1Zi5VbmludGVycHJldGVkT3B0aW9uQhjiPxUSE3VuaW50ZXJwcmV0ZWRPcHRpb25SE3VuaW50ZXJwcmV0Z
  WRPcHRpb24iaQoMT3B0aW1pemVNb2RlEhUKBVNQRUVEEAEaCuI/BxIFU1BFRUQSHQoJQ09ERV9TSVpFEAIaDuI/CxIJQ09ERV9TS
  VpFEiMKDExJVEVfUlVOVElNRRADGhHiPw4SDExJVEVfUlVOVElNRSoJCOgHEICAgIACSgQIKhArSgQIJhAnUhRwaHBfZ2VuZXJpY
  19zZXJ2aWNlcyKiBQoOTWVzc2FnZU9wdGlvbnMSVwoXbWVzc2FnZV9zZXRfd2lyZV9mb3JtYXQYASABKAg6BWZhbHNlQhniPxYSF
  G1lc3NhZ2VTZXRXaXJlRm9ybWF0UhRtZXNzYWdlU2V0V2lyZUZvcm1hdBJvCh9ub19zdGFuZGFyZF9kZXNjcmlwdG9yX2FjY2Vzc
  29yGAIgASgIOgVmYWxzZUIh4j8eEhxub1N0YW5kYXJkRGVzY3JpcHRvckFjY2Vzc29yUhxub1N0YW5kYXJkRGVzY3JpcHRvckFjY
  2Vzc29yEjYKCmRlcHJlY2F0ZWQYAyABKAg6BWZhbHNlQg/iPwwSCmRlcHJlY2F0ZWRSCmRlcHJlY2F0ZWQSKgoJbWFwX2VudHJ5G
  AcgASgIQg3iPwoSCG1hcEVudHJ5UghtYXBFbnRyeRJ9CiZkZXByZWNhdGVkX2xlZ2FjeV9qc29uX2ZpZWxkX2NvbmZsaWN0cxgLI
  AEoCEIpGAHiPyQSImRlcHJlY2F0ZWRMZWdhY3lKc29uRmllbGRDb25mbGljdHNSImRlcHJlY2F0ZWRMZWdhY3lKc29uRmllbGRDb
  25mbGljdHMSRgoIZmVhdHVyZXMYDCABKAsyGy5nb29nbGUucHJvdG9idWYuRmVhdHVyZVNldEIN4j8KEghmZWF0dXJlc1IIZmVhd
  HVyZXMScgoUdW5pbnRlcnByZXRlZF9vcHRpb24Y5wcgAygLMiQuZ29vZ2xlLnByb3RvYnVmLlVuaW50ZXJwcmV0ZWRPcHRpb25CG
  OI/FRITdW5pbnRlcnByZXRlZE9wdGlvblITdW5pbnRlcnByZXRlZE9wdGlvbioJCOgHEICAgIACSgQIBBAFSgQIBRAGSgQIBhAHS
  gQICBAJSgQICRAKIqQTCgxGaWVsZE9wdGlvbnMSTQoFY3R5cGUYASABKA4yIy5nb29nbGUucHJvdG9idWYuRmllbGRPcHRpb25zL
  kNUeXBlOgZTVFJJTkdCCuI/BxIFY3R5cGVSBWN0eXBlEiMKBnBhY2tlZBgCIAEoCEIL4j8IEgZwYWNrZWRSBnBhY2tlZBJUCgZqc
  3R5cGUYBiABKA4yJC5nb29nbGUucHJvdG9idWYuRmllbGRPcHRpb25zLkpTVHlwZToJSlNfTk9STUFMQgviPwgSBmpzdHlwZVIGa
  nN0eXBlEiQKBGxhenkYBSABKAg6BWZhbHNlQgniPwYSBGxhenlSBGxhenkSQwoPdW52ZXJpZmllZF9sYXp5GA8gASgIOgVmYWxzZ
  UIT4j8QEg51bnZlcmlmaWVkTGF6eVIOdW52ZXJpZmllZExhenkSNgoKZGVwcmVjYXRlZBgDIAEoCDoFZmFsc2VCD+I/DBIKZGVwc
  mVjYXRlZFIKZGVwcmVjYXRlZBImCgR3ZWFrGAogASgIOgVmYWxzZUILGAHiPwYSBHdlYWtSBHdlYWsSOgoMZGVidWdfcmVkYWN0G
  BAgASgIOgVmYWxzZUIQ4j8NEgtkZWJ1Z1JlZGFjdFILZGVidWdSZWRhY3QSWwoJcmV0ZW50aW9uGBEgASgOMi0uZ29vZ2xlLnByb
  3RvYnVmLkZpZWxkT3B0aW9ucy5PcHRpb25SZXRlbnRpb25CDuI/CxIJcmV0ZW50aW9uUglyZXRlbnRpb24SVgoHdGFyZ2V0cxgTI
  AMoDjIuLmdvb2dsZS5wcm90b2J1Zi5GaWVsZE9wdGlvbnMuT3B0aW9uVGFyZ2V0VHlwZUIM4j8JEgd0YXJnZXRzUgd0YXJnZXRzE
  m0KEGVkaXRpb25fZGVmYXVsdHMYFCADKAsyLC5nb29nbGUucHJvdG9idWYuRmllbGRPcHRpb25zLkVkaXRpb25EZWZhdWx0QhTiP
  xESD2VkaXRpb25EZWZhdWx0c1IPZWRpdGlvbkRlZmF1bHRzEkYKCGZlYXR1cmVzGBUgASgLMhsuZ29vZ2xlLnByb3RvYnVmLkZlY
  XR1cmVTZXRCDeI/ChIIZmVhdHVyZXNSCGZlYXR1cmVzEmoKD2ZlYXR1cmVfc3VwcG9ydBgWIAEoCzIsLmdvb2dsZS5wcm90b2J1Z
  i5GaWVsZE9wdGlvbnMuRmVhdHVyZVN1cHBvcnRCE+I/EBIOZmVhdHVyZVN1cHBvcnRSDmZlYXR1cmVTdXBwb3J0EnIKFHVuaW50Z
  XJwcmV0ZWRfb3B0aW9uGOcHIAMoCzIkLmdvb2dsZS5wcm90b2J1Zi5VbmludGVycHJldGVkT3B0aW9uQhjiPxUSE3VuaW50ZXJwc
  mV0ZWRPcHRpb25SE3VuaW50ZXJwcmV0ZWRPcHRpb24adAoORWRpdGlvbkRlZmF1bHQSQAoHZWRpdGlvbhgDIAEoDjIYLmdvb2dsZ
  S5wcm90b2J1Zi5FZGl0aW9uQgziPwkSB2VkaXRpb25SB2VkaXRpb24SIAoFdmFsdWUYAiABKAlCCuI/BxIFdmFsdWVSBXZhbHVlG
  vQCCg5GZWF0dXJlU3VwcG9ydBJfChJlZGl0aW9uX2ludHJvZHVjZWQYASABKA4yGC5nb29nbGUucHJvdG9idWYuRWRpdGlvbkIW4
  j8TEhFlZGl0aW9uSW50cm9kdWNlZFIRZWRpdGlvbkludHJvZHVjZWQSXwoSZWRpdGlvbl9kZXByZWNhdGVkGAIgASgOMhguZ29vZ
  2xlLnByb3RvYnVmLkVkaXRpb25CFuI/ExIRZWRpdGlvbkRlcHJlY2F0ZWRSEWVkaXRpb25EZXByZWNhdGVkEkgKE2RlcHJlY2F0a
  W9uX3dhcm5pbmcYAyABKAlCF+I/FBISZGVwcmVjYXRpb25XYXJuaW5nUhJkZXByZWNhdGlvbldhcm5pbmcSVgoPZWRpdGlvbl9yZ
  W1vdmVkGAQgASgOMhguZ29vZ2xlLnByb3RvYnVmLkVkaXRpb25CE+I/EBIOZWRpdGlvblJlbW92ZWRSDmVkaXRpb25SZW1vdmVkI
  loKBUNUeXBlEhcKBlNUUklORxAAGgviPwgSBlNUUklORxITCgRDT1JEEAEaCeI/BhIEQ09SRBIjCgxTVFJJTkdfUElFQ0UQAhoR4
  j8OEgxTVFJJTkdfUElFQ0UiZQoGSlNUeXBlEh0KCUpTX05PUk1BTBAAGg7iPwsSCUpTX05PUk1BTBIdCglKU19TVFJJTkcQARoO4
  j8LEglKU19TVFJJTkcSHQoJSlNfTlVNQkVSEAIaDuI/CxIJSlNfTlVNQkVSIpwBCg9PcHRpb25SZXRlbnRpb24SLQoRUkVURU5US
  U9OX1VOS05PV04QABoW4j8TEhFSRVRFTlRJT05fVU5LTk9XThItChFSRVRFTlRJT05fUlVOVElNRRABGhbiPxMSEVJFVEVOVElPT
  l9SVU5USU1FEisKEFJFVEVOVElPTl9TT1VSQ0UQAhoV4j8SEhBSRVRFTlRJT05fU09VUkNFIpAEChBPcHRpb25UYXJnZXRUeXBlE
  jEKE1RBUkdFVF9UWVBFX1VOS05PV04QABoY4j8VEhNUQVJHRVRfVFlQRV9VTktOT1dOEisKEFRBUkdFVF9UWVBFX0ZJTEUQARoV4
  j8SEhBUQVJHRVRfVFlQRV9GSUxFEkEKG1RBUkdFVF9UWVBFX0VYVEVOU0lPTl9SQU5HRRACGiDiPx0SG1RBUkdFVF9UWVBFX0VYV
  EVOU0lPTl9SQU5HRRIxChNUQVJHRVRfVFlQRV9NRVNTQUdFEAMaGOI/FRITVEFSR0VUX1RZUEVfTUVTU0FHRRItChFUQVJHRVRfV
  FlQRV9GSUVMRBAEGhbiPxMSEVRBUkdFVF9UWVBFX0ZJRUxEEi0KEVRBUkdFVF9UWVBFX09ORU9GEAUaFuI/ExIRVEFSR0VUX1RZU
  EVfT05FT0YSKwoQVEFSR0VUX1RZUEVfRU5VTRAGGhXiPxISEFRBUkdFVF9UWVBFX0VOVU0SNwoWVEFSR0VUX1RZUEVfRU5VTV9FT
  lRSWRAHGhviPxgSFlRBUkdFVF9UWVBFX0VOVU1fRU5UUlkSMQoTVEFSR0VUX1RZUEVfU0VSVklDRRAIGhjiPxUSE1RBUkdFVF9UW
  VBFX1NFUlZJQ0USLwoSVEFSR0VUX1RZUEVfTUVUSE9EEAkaF+I/FBISVEFSR0VUX1RZUEVfTUVUSE9EKgkI6AcQgICAgAJKBAgEE
  AVKBAgSEBMi1QEKDE9uZW9mT3B0aW9ucxJGCghmZWF0dXJlcxgBIAEoCzIbLmdvb2dsZS5wcm90b2J1Zi5GZWF0dXJlU2V0Qg3iP
  woSCGZlYXR1cmVzUghmZWF0dXJlcxJyChR1bmludGVycHJldGVkX29wdGlvbhjnByADKAsyJC5nb29nbGUucHJvdG9idWYuVW5pb
  nRlcnByZXRlZE9wdGlvbkIY4j8VEhN1bmludGVycHJldGVkT3B0aW9uUhN1bmludGVycHJldGVkT3B0aW9uKgkI6AcQgICAgAIiw
  wMKC0VudW1PcHRpb25zEjAKC2FsbG93X2FsaWFzGAIgASgIQg/iPwwSCmFsbG93QWxpYXNSCmFsbG93QWxpYXMSNgoKZGVwcmVjY
  XRlZBgDIAEoCDoFZmFsc2VCD+I/DBIKZGVwcmVjYXRlZFIKZGVwcmVjYXRlZBJ9CiZkZXByZWNhdGVkX2xlZ2FjeV9qc29uX2ZpZ
  WxkX2NvbmZsaWN0cxgGIAEoCEIpGAHiPyQSImRlcHJlY2F0ZWRMZWdhY3lKc29uRmllbGRDb25mbGljdHNSImRlcHJlY2F0ZWRMZ
  WdhY3lKc29uRmllbGRDb25mbGljdHMSRgoIZmVhdHVyZXMYByABKAsyGy5nb29nbGUucHJvdG9idWYuRmVhdHVyZVNldEIN4j8KE
  ghmZWF0dXJlc1IIZmVhdHVyZXMScgoUdW5pbnRlcnByZXRlZF9vcHRpb24Y5wcgAygLMiQuZ29vZ2xlLnByb3RvYnVmLlVuaW50Z
  XJwcmV0ZWRPcHRpb25CGOI/FRITdW5pbnRlcnByZXRlZE9wdGlvblITdW5pbnRlcnByZXRlZE9wdGlvbioJCOgHEICAgIACSgQIB
  RAGIrkDChBFbnVtVmFsdWVPcHRpb25zEjYKCmRlcHJlY2F0ZWQYASABKAg6BWZhbHNlQg/iPwwSCmRlcHJlY2F0ZWRSCmRlcHJlY
  2F0ZWQSRgoIZmVhdHVyZXMYAiABKAsyGy5nb29nbGUucHJvdG9idWYuRmVhdHVyZVNldEIN4j8KEghmZWF0dXJlc1IIZmVhdHVyZ
  XMSOgoMZGVidWdfcmVkYWN0GAMgASgIOgVmYWxzZUIQ4j8NEgtkZWJ1Z1JlZGFjdFILZGVidWdSZWRhY3QSagoPZmVhdHVyZV9zd
  XBwb3J0GAQgASgLMiwuZ29vZ2xlLnByb3RvYnVmLkZpZWxkT3B0aW9ucy5GZWF0dXJlU3VwcG9ydEIT4j8QEg5mZWF0dXJlU3Vwc
  G9ydFIOZmVhdHVyZVN1cHBvcnQScgoUdW5pbnRlcnByZXRlZF9vcHRpb24Y5wcgAygLMiQuZ29vZ2xlLnByb3RvYnVmLlVuaW50Z
  XJwcmV0ZWRPcHRpb25CGOI/FRITdW5pbnRlcnByZXRlZE9wdGlvblITdW5pbnRlcnByZXRlZE9wdGlvbioJCOgHEICAgIACIo8CC
  g5TZXJ2aWNlT3B0aW9ucxJGCghmZWF0dXJlcxgiIAEoCzIbLmdvb2dsZS5wcm90b2J1Zi5GZWF0dXJlU2V0Qg3iPwoSCGZlYXR1c
  mVzUghmZWF0dXJlcxI2CgpkZXByZWNhdGVkGCEgASgIOgVmYWxzZUIP4j8MEgpkZXByZWNhdGVkUgpkZXByZWNhdGVkEnIKFHVua
  W50ZXJwcmV0ZWRfb3B0aW9uGOcHIAMoCzIkLmdvb2dsZS5wcm90b2J1Zi5VbmludGVycHJldGVkT3B0aW9uQhjiPxUSE3VuaW50Z
  XJwcmV0ZWRPcHRpb25SE3VuaW50ZXJwcmV0ZWRPcHRpb24qCQjoBxCAgICAAiKtBAoNTWV0aG9kT3B0aW9ucxI2CgpkZXByZWNhd
  GVkGCEgASgIOgVmYWxzZUIP4j8MEgpkZXByZWNhdGVkUgpkZXByZWNhdGVkEogBChFpZGVtcG90ZW5jeV9sZXZlbBgiIAEoDjIvL
  mdvb2dsZS5wcm90b2J1Zi5NZXRob2RPcHRpb25zLklkZW1wb3RlbmN5TGV2ZWw6E0lERU1QT1RFTkNZX1VOS05PV05CFeI/EhIQa
  WRlbXBvdGVuY3lMZXZlbFIQaWRlbXBvdGVuY3lMZXZlbBJGCghmZWF0dXJlcxgjIAEoCzIbLmdvb2dsZS5wcm90b2J1Zi5GZWF0d
  XJlU2V0Qg3iPwoSCGZlYXR1cmVzUghmZWF0dXJlcxJyChR1bmludGVycHJldGVkX29wdGlvbhjnByADKAsyJC5nb29nbGUucHJvd
  G9idWYuVW5pbnRlcnByZXRlZE9wdGlvbkIY4j8VEhN1bmludGVycHJldGVkT3B0aW9uUhN1bmludGVycHJldGVkT3B0aW9uIpEBC
  hBJZGVtcG90ZW5jeUxldmVsEjEKE0lERU1QT1RFTkNZX1VOS05PV04QABoY4j8VEhNJREVNUE9URU5DWV9VTktOT1dOEikKD05PX
  1NJREVfRUZGRUNUUxABGhTiPxESD05PX1NJREVfRUZGRUNUUxIfCgpJREVNUE9URU5UEAIaD+I/DBIKSURFTVBPVEVOVCoJCOgHE
  ICAgIACIsMEChNVbmludGVycHJldGVkT3B0aW9uEkwKBG5hbWUYAiADKAsyLS5nb29nbGUucHJvdG9idWYuVW5pbnRlcnByZXRlZ
  E9wdGlvbi5OYW1lUGFydEIJ4j8GEgRuYW1lUgRuYW1lEj8KEGlkZW50aWZpZXJfdmFsdWUYAyABKAlCFOI/ERIPaWRlbnRpZmllc
  lZhbHVlUg9pZGVudGlmaWVyVmFsdWUSQwoScG9zaXRpdmVfaW50X3ZhbHVlGAQgASgEQhXiPxISEHBvc2l0aXZlSW50VmFsdWVSE
  HBvc2l0aXZlSW50VmFsdWUSQwoSbmVnYXRpdmVfaW50X3ZhbHVlGAUgASgDQhXiPxISEG5lZ2F0aXZlSW50VmFsdWVSEG5lZ2F0a
  XZlSW50VmFsdWUSMwoMZG91YmxlX3ZhbHVlGAYgASgBQhDiPw0SC2RvdWJsZVZhbHVlUgtkb3VibGVWYWx1ZRIzCgxzdHJpbmdfd
  mFsdWUYByABKAxCEOI/DRILc3RyaW5nVmFsdWVSC3N0cmluZ1ZhbHVlEjwKD2FnZ3JlZ2F0ZV92YWx1ZRgIIAEoCUIT4j8QEg5hZ
  2dyZWdhdGVWYWx1ZVIOYWdncmVnYXRlVmFsdWUaawoITmFtZVBhcnQSKgoJbmFtZV9wYXJ0GAEgAigJQg3iPwoSCG5hbWVQYXJ0U
  ghuYW1lUGFydBIzCgxpc19leHRlbnNpb24YAiACKAhCEOI/DRILaXNFeHRlbnNpb25SC2lzRXh0ZW5zaW9uIucUCgpGZWF0dXJlU
  2V0EqMBCg5maWVsZF9wcmVzZW5jZRgBIAEoDjIpLmdvb2dsZS5wcm90b2J1Zi5GZWF0dXJlU2V0LkZpZWxkUHJlc2VuY2VCUYgBA
  ZgBBJgBAaIBDRIIRVhQTElDSVQYhAeiAQ0SCElNUExJQ0lUGOcHogENEghFWFBMSUNJVBjoB7IBAwjoB+I/DxINZmllbGRQcmVzZ
  W5jZVINZmllbGRQcmVzZW5jZRJ5CgllbnVtX3R5cGUYAiABKA4yJC5nb29nbGUucHJvdG9idWYuRmVhdHVyZVNldC5FbnVtVHlwZ
  UI2iAEBmAEGmAEBogELEgZDTE9TRUQYhAeiAQkSBE9QRU4Y5weyAQMI6AfiPwoSCGVudW1UeXBlUghlbnVtVHlwZRKyAQoXcmVwZ
  WF0ZWRfZmllbGRfZW5jb2RpbmcYAyABKA4yMS5nb29nbGUucHJvdG9idWYuRmVhdHVyZVNldC5SZXBlYXRlZEZpZWxkRW5jb2Rpb
  mdCR4gBAZgBBJgBAaIBDRIIRVhQQU5ERUQYhAeiAQsSBlBBQ0tFRBjnB7IBAwjoB+I/FxIVcmVwZWF0ZWRGaWVsZEVuY29kaW5nU
  hVyZXBlYXRlZEZpZWxkRW5jb2RpbmcSkQEKD3V0ZjhfdmFsaWRhdGlvbhgEIAEoDjIqLmdvb2dsZS5wcm90b2J1Zi5GZWF0dXJlU
  2V0LlV0ZjhWYWxpZGF0aW9uQjyIAQGYAQSYAQGiAQkSBE5PTkUYhAeiAQsSBlZFUklGWRjnB7IBAwjoB+I/EBIOdXRmOFZhbGlkY
  XRpb25SDnV0ZjhWYWxpZGF0aW9uEpIBChBtZXNzYWdlX2VuY29kaW5nGAUgASgOMisuZ29vZ2xlLnByb3RvYnVmLkZlYXR1cmVTZ
  XQuTWVzc2FnZUVuY29kaW5nQjqIAQGYAQSYAQGiARQSD0xFTkdUSF9QUkVGSVhFRBiEB7IBAwjoB+I/ERIPbWVzc2FnZUVuY29ka
  W5nUg9tZXNzYWdlRW5jb2RpbmcSkQEKC2pzb25fZm9ybWF0GAYgASgOMiYuZ29vZ2xlLnByb3RvYnVmLkZlYXR1cmVTZXQuSnNvb
  kZvcm1hdEJIiAEBmAEDmAEGmAEBogEXEhJMRUdBQ1lfQkVTVF9FRkZPUlQYhAeiAQoSBUFMTE9XGOcHsgEDCOgH4j8MEgpqc29uR
  m9ybWF0Ugpqc29uRm9ybWF0EsIBChRlbmZvcmNlX25hbWluZ19zdHlsZRgHIAEoDjIuLmdvb2dsZS5wcm90b2J1Zi5GZWF0dXJlU
  2V0LkVuZm9yY2VOYW1pbmdTdHlsZUJgiAECmAEBmAECmAEDmAEEmAEFmAEGmAEHmAEImAEJogEREgxTVFlMRV9MRUdBQ1kYhAeiA
  Q4SCVNUWUxFMjAyNBjpB7IBAwjpB+I/FBISZW5mb3JjZU5hbWluZ1N0eWxlUhJlbmZvcmNlTmFtaW5nU3R5bGUS1QEKGWRlZmF1b
  HRfc3ltYm9sX3Zpc2liaWxpdHkYCCABKA4yRS5nb29nbGUucHJvdG9idWYuRmVhdHVyZVNldC5WaXNpYmlsaXR5RmVhdHVyZS5EZ
  WZhdWx0U3ltYm9sVmlzaWJpbGl0eUJSiAECmAEBogEPEgpFWFBPUlRfQUxMGIQHogEVEhBFWFBPUlRfVE9QX0xFVkVMGOkHsgEDC
  OkH4j8ZEhdkZWZhdWx0U3ltYm9sVmlzaWJpbGl0eVIXZGVmYXVsdFN5bWJvbFZpc2liaWxpdHkajgIKEVZpc2liaWxpdHlGZWF0d
  XJlIu4BChdEZWZhdWx0U3ltYm9sVmlzaWJpbGl0eRJNCiFERUZBVUxUX1NZTUJPTF9WSVNJQklMSVRZX1VOS05PV04QABom4j8jE
  iFERUZBVUxUX1NZTUJPTF9WSVNJQklMSVRZX1VOS05PV04SHwoKRVhQT1JUX0FMTBABGg/iPwwSCkVYUE9SVF9BTEwSKwoQRVhQT
  1JUX1RPUF9MRVZFTBACGhXiPxISEEVYUE9SVF9UT1BfTEVWRUwSHQoJTE9DQUxfQUxMEAMaDuI/CxIJTE9DQUxfQUxMEhcKBlNUU
  klDVBAEGgviPwgSBlNUUklDVEoICAEQgICAgAIirQEKDUZpZWxkUHJlc2VuY2USNwoWRklFTERfUFJFU0VOQ0VfVU5LTk9XThAAG
  hviPxgSFkZJRUxEX1BSRVNFTkNFX1VOS05PV04SGwoIRVhQTElDSVQQARoN4j8KEghFWFBMSUNJVBIbCghJTVBMSUNJVBACGg3iP
  woSCElNUExJQ0lUEikKD0xFR0FDWV9SRVFVSVJFRBADGhTiPxESD0xFR0FDWV9SRVFVSVJFRCJnCghFbnVtVHlwZRItChFFTlVNX
  1RZUEVfVU5LTk9XThAAGhbiPxMSEUVOVU1fVFlQRV9VTktOT1dOEhMKBE9QRU4QARoJ4j8GEgRPUEVOEhcKBkNMT1NFRBACGgviP
  wgSBkNMT1NFRCKYAQoVUmVwZWF0ZWRGaWVsZEVuY29kaW5nEkkKH1JFUEVBVEVEX0ZJRUxEX0VOQ09ESU5HX1VOS05PV04QABok4
  j8hEh9SRVBFQVRFRF9GSUVMRF9FTkNPRElOR19VTktOT1dOEhcKBlBBQ0tFRBABGgviPwgSBlBBQ0tFRBIbCghFWFBBTkRFRBACG
  g3iPwoSCEVYUEFOREVEIn8KDlV0ZjhWYWxpZGF0aW9uEjkKF1VURjhfVkFMSURBVElPTl9VTktOT1dOEAAaHOI/GRIXVVRGOF9WQ
  UxJREFUSU9OX1VOS05PV04SFwoGVkVSSUZZEAIaC+I/CBIGVkVSSUZZEhMKBE5PTkUQAxoJ4j8GEgROT05FIgQIARABIpgBCg9NZ
  XNzYWdlRW5jb2RpbmcSOwoYTUVTU0FHRV9FTkNPRElOR19VTktOT1dOEAAaHeI/GhIYTUVTU0FHRV9FTkNPRElOR19VTktOT1dOE
  ikKD0xFTkdUSF9QUkVGSVhFRBABGhTiPxESD0xFTkdUSF9QUkVGSVhFRBIdCglERUxJTUlURUQQAhoO4j8LEglERUxJTUlURUQih
  wEKCkpzb25Gb3JtYXQSMQoTSlNPTl9GT1JNQVRfVU5LTk9XThAAGhjiPxUSE0pTT05fRk9STUFUX1VOS05PV04SFQoFQUxMT1cQA
  RoK4j8HEgVBTExPVxIvChJMRUdBQ1lfQkVTVF9FRkZPUlQQAhoX4j8UEhJMRUdBQ1lfQkVTVF9FRkZPUlQinQEKEkVuZm9yY2VOY
  W1pbmdTdHlsZRJDChxFTkZPUkNFX05BTUlOR19TVFlMRV9VTktOT1dOEAAaIeI/HhIcRU5GT1JDRV9OQU1JTkdfU1RZTEVfVU5LT
  k9XThIdCglTVFlMRTIwMjQQARoO4j8LEglTVFlMRTIwMjQSIwoMU1RZTEVfTEVHQUNZEAIaEeI/DhIMU1RZTEVfTEVHQUNZKgYI6
  AcQi04qBgiLThCQTioGCJBOEJFOSgYI5wcQ6Aci5AQKEkZlYXR1cmVTZXREZWZhdWx0cxJnCghkZWZhdWx0cxgBIAMoCzI8Lmdvb
  2dsZS5wcm90b2J1Zi5GZWF0dXJlU2V0RGVmYXVsdHMuRmVhdHVyZVNldEVkaXRpb25EZWZhdWx0Qg3iPwoSCGRlZmF1bHRzUghkZ
  WZhdWx0cxJWCg9taW5pbXVtX2VkaXRpb24YBCABKA4yGC5nb29nbGUucHJvdG9idWYuRWRpdGlvbkIT4j8QEg5taW5pbXVtRWRpd
  GlvblIObWluaW11bUVkaXRpb24SVgoPbWF4aW11bV9lZGl0aW9uGAUgASgOMhguZ29vZ2xlLnByb3RvYnVmLkVkaXRpb25CE+I/E
  BIObWF4aW11bUVkaXRpb25SDm1heGltdW1FZGl0aW9uGrQCChhGZWF0dXJlU2V0RWRpdGlvbkRlZmF1bHQSQAoHZWRpdGlvbhgDI
  AEoDjIYLmdvb2dsZS5wcm90b2J1Zi5FZGl0aW9uQgziPwkSB2VkaXRpb25SB2VkaXRpb24SaAoUb3ZlcnJpZGFibGVfZmVhdHVyZ
  XMYBCABKAsyGy5nb29nbGUucHJvdG9idWYuRmVhdHVyZVNldEIY4j8VEhNvdmVycmlkYWJsZUZlYXR1cmVzUhNvdmVycmlkYWJsZ
  UZlYXR1cmVzElYKDmZpeGVkX2ZlYXR1cmVzGAUgASgLMhsuZ29vZ2xlLnByb3RvYnVmLkZlYXR1cmVTZXRCEuI/DxINZml4ZWRGZ
  WF0dXJlc1INZml4ZWRGZWF0dXJlc0oECAEQAkoECAIQA1IIZmVhdHVyZXMioQMKDlNvdXJjZUNvZGVJbmZvElMKCGxvY2F0aW9uG
  AEgAygLMiguZ29vZ2xlLnByb3RvYnVmLlNvdXJjZUNvZGVJbmZvLkxvY2F0aW9uQg3iPwoSCGxvY2F0aW9uUghsb2NhdGlvbhqrA
  goITG9jYXRpb24SHwoEcGF0aBgBIAMoBUILEAHiPwYSBHBhdGhSBHBhdGgSHwoEc3BhbhgCIAMoBUILEAHiPwYSBHNwYW5SBHNwY
  W4SPwoQbGVhZGluZ19jb21tZW50cxgDIAEoCUIU4j8REg9sZWFkaW5nQ29tbWVudHNSD2xlYWRpbmdDb21tZW50cxJCChF0cmFpb
  GluZ19jb21tZW50cxgEIAEoCUIV4j8SEhB0cmFpbGluZ0NvbW1lbnRzUhB0cmFpbGluZ0NvbW1lbnRzElgKGWxlYWRpbmdfZGV0Y
  WNoZWRfY29tbWVudHMYBiADKAlCHOI/GRIXbGVhZGluZ0RldGFjaGVkQ29tbWVudHNSF2xlYWRpbmdEZXRhY2hlZENvbW1lbnRzK
  gwIgOzK/wEQgezK/wEiwQMKEUdlbmVyYXRlZENvZGVJbmZvEl4KCmFubm90YXRpb24YASADKAsyLS5nb29nbGUucHJvdG9idWYuR
  2VuZXJhdGVkQ29kZUluZm8uQW5ub3RhdGlvbkIP4j8MEgphbm5vdGF0aW9uUgphbm5vdGF0aW9uGssCCgpBbm5vdGF0aW9uEh8KB
  HBhdGgYASADKAVCCxAB4j8GEgRwYXRoUgRwYXRoEjAKC3NvdXJjZV9maWxlGAIgASgJQg/iPwwSCnNvdXJjZUZpbGVSCnNvdXJjZ
  UZpbGUSIAoFYmVnaW4YAyABKAVCCuI/BxIFYmVnaW5SBWJlZ2luEhoKA2VuZBgEIAEoBUII4j8FEgNlbmRSA2VuZBJhCghzZW1hb
  nRpYxgFIAEoDjI2Lmdvb2dsZS5wcm90b2J1Zi5HZW5lcmF0ZWRDb2RlSW5mby5Bbm5vdGF0aW9uLlNlbWFudGljQg3iPwoSCHNlb
  WFudGljUghzZW1hbnRpYyJJCghTZW1hbnRpYxITCgROT05FEAAaCeI/BhIETk9ORRIRCgNTRVQQARoI4j8FEgNTRVQSFQoFQUxJQ
  VMQAhoK4j8HEgVBTElBUyrCBAoHRWRpdGlvbhIpCg9FRElUSU9OX1VOS05PV04QABoU4j8REg9FRElUSU9OX1VOS05PV04SKAoOR
  URJVElPTl9MRUdBQ1kQhAcaE+I/EBIORURJVElPTl9MRUdBQ1kSKAoORURJVElPTl9QUk9UTzIQ5gcaE+I/EBIORURJVElPTl9QU
  k9UTzISKAoORURJVElPTl9QUk9UTzMQ5wcaE+I/EBIORURJVElPTl9QUk9UTzMSJAoMRURJVElPTl8yMDIzEOgHGhHiPw4SDEVES
  VRJT05fMjAyMxIkCgxFRElUSU9OXzIwMjQQ6QcaEeI/DhIMRURJVElPTl8yMDI0EjEKE0VESVRJT05fMV9URVNUX09OTFkQARoY4
  j8VEhNFRElUSU9OXzFfVEVTVF9PTkxZEjEKE0VESVRJT05fMl9URVNUX09OTFkQAhoY4j8VEhNFRElUSU9OXzJfVEVTVF9PTkxZE
  jsKF0VESVRJT05fOTk5OTdfVEVTVF9PTkxZEJ2NBhoc4j8ZEhdFRElUSU9OXzk5OTk3X1RFU1RfT05MWRI7ChdFRElUSU9OXzk5O
  Tk4X1RFU1RfT05MWRCejQYaHOI/GRIXRURJVElPTl85OTk5OF9URVNUX09OTFkSOwoXRURJVElPTl85OTk5OV9URVNUX09OTFkQn
  40GGhziPxkSF0VESVRJT05fOTk5OTlfVEVTVF9PTkxZEiUKC0VESVRJT05fTUFYEP////8HGhDiPw0SC0VESVRJT05fTUFYKpsBC
  hBTeW1ib2xWaXNpYmlsaXR5EisKEFZJU0lCSUxJVFlfVU5TRVQQABoV4j8SEhBWSVNJQklMSVRZX1VOU0VUEisKEFZJU0lCSUxJV
  FlfTE9DQUwQARoV4j8SEhBWSVNJQklMSVRZX0xPQ0FMEi0KEVZJU0lCSUxJVFlfRVhQT1JUEAIaFuI/ExIRVklTSUJJTElUWV9FW
  FBPUlRCfgoTY29tLmdvb2dsZS5wcm90b2J1ZkIQRGVzY3JpcHRvclByb3Rvc0gBWi1nb29nbGUuZ29sYW5nLm9yZy9wcm90b2J1Z
  i90eXBlcy9kZXNjcmlwdG9ycGL4AQGiAgNHUEKqAhpHb29nbGUuUHJvdG9idWYuUmVmbGVjdGlvbg=="""
      ).mkString)
  lazy val scalaDescriptor: _root_.scalapb.descriptors.FileDescriptor = {
    val scalaProto = com.google.protobuf.descriptor.FileDescriptorProto.parseFrom(ProtoBytes)
    _root_.scalapb.descriptors.FileDescriptor.buildFrom(scalaProto, dependencies.map(_.scalaDescriptor))
  }
  lazy val javaDescriptor: com.google.protobuf.Descriptors.FileDescriptor =
    com.google.protobuf.DescriptorProtos.getDescriptor()
  @deprecated("Use javaDescriptor instead. In a future version this will refer to scalaDescriptor.", "ScalaPB 0.5.47")
  def descriptor: com.google.protobuf.Descriptors.FileDescriptor = javaDescriptor
}