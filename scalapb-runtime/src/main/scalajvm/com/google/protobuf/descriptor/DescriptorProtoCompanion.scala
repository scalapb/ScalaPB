// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO2

package com.google.protobuf.descriptor

object DescriptorProtoCompanion extends _root_.scalapb.GeneratedFileObject {
  lazy val dependencies: Seq[_root_.scalapb.GeneratedFileObject] = Seq.empty
  lazy val messagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] =
    Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]](
      com.google.protobuf.descriptor.FileDescriptorSet,
      com.google.protobuf.descriptor.FileDescriptorProto,
      com.google.protobuf.descriptor.DescriptorProto,
      com.google.protobuf.descriptor.ExtensionRangeOptions,
      com.google.protobuf.descriptor.FieldDescriptorProto,
      com.google.protobuf.descriptor.OneofDescriptorProto,
      com.google.protobuf.descriptor.EnumDescriptorProto,
      com.google.protobuf.descriptor.EnumValueDescriptorProto,
      com.google.protobuf.descriptor.ServiceDescriptorProto,
      com.google.protobuf.descriptor.MethodDescriptorProto,
      com.google.protobuf.descriptor.FileOptions,
      com.google.protobuf.descriptor.MessageOptions,
      com.google.protobuf.descriptor.FieldOptions,
      com.google.protobuf.descriptor.OneofOptions,
      com.google.protobuf.descriptor.EnumOptions,
      com.google.protobuf.descriptor.EnumValueOptions,
      com.google.protobuf.descriptor.ServiceOptions,
      com.google.protobuf.descriptor.MethodOptions,
      com.google.protobuf.descriptor.UninterpretedOption,
      com.google.protobuf.descriptor.SourceCodeInfo,
      com.google.protobuf.descriptor.GeneratedCodeInfo
    )
  private lazy val ProtoBytes: _root_.scala.Array[Byte] =
      scalapb.Encoding.fromBase64(scala.collection.immutable.Seq(
  """CiBnb29nbGUvcHJvdG9idWYvZGVzY3JpcHRvci5wcm90bxIPZ29vZ2xlLnByb3RvYnVmIlgKEUZpbGVEZXNjcmlwdG9yU2V0E
  kMKBGZpbGUYASADKAsyJC5nb29nbGUucHJvdG9idWYuRmlsZURlc2NyaXB0b3JQcm90b0IJ4j8GEgRmaWxlUgRmaWxlIqkGChNGa
  WxlRGVzY3JpcHRvclByb3RvEh0KBG5hbWUYASABKAlCCeI/BhIEbmFtZVIEbmFtZRImCgdwYWNrYWdlGAIgASgJQgziPwkSB3BhY
  2thZ2VSB3BhY2thZ2USLwoKZGVwZW5kZW5jeRgDIAMoCUIP4j8MEgpkZXBlbmRlbmN5UgpkZXBlbmRlbmN5EkIKEXB1YmxpY19kZ
  XBlbmRlbmN5GAogAygFQhXiPxISEHB1YmxpY0RlcGVuZGVuY3lSEHB1YmxpY0RlcGVuZGVuY3kSPAoPd2Vha19kZXBlbmRlbmN5G
  AsgAygFQhPiPxASDndlYWtEZXBlbmRlbmN5Ug53ZWFrRGVwZW5kZW5jeRJVCgxtZXNzYWdlX3R5cGUYBCADKAsyIC5nb29nbGUuc
  HJvdG9idWYuRGVzY3JpcHRvclByb3RvQhDiPw0SC21lc3NhZ2VUeXBlUgttZXNzYWdlVHlwZRJQCgllbnVtX3R5cGUYBSADKAsyJ
  C5nb29nbGUucHJvdG9idWYuRW51bURlc2NyaXB0b3JQcm90b0IN4j8KEghlbnVtVHlwZVIIZW51bVR5cGUSTwoHc2VydmljZRgGI
  AMoCzInLmdvb2dsZS5wcm90b2J1Zi5TZXJ2aWNlRGVzY3JpcHRvclByb3RvQgziPwkSB3NlcnZpY2VSB3NlcnZpY2USUwoJZXh0Z
  W5zaW9uGAcgAygLMiUuZ29vZ2xlLnByb3RvYnVmLkZpZWxkRGVzY3JpcHRvclByb3RvQg7iPwsSCWV4dGVuc2lvblIJZXh0ZW5za
  W9uEkQKB29wdGlvbnMYCCABKAsyHC5nb29nbGUucHJvdG9idWYuRmlsZU9wdGlvbnNCDOI/CRIHb3B0aW9uc1IHb3B0aW9ucxJeC
  hBzb3VyY2VfY29kZV9pbmZvGAkgASgLMh8uZ29vZ2xlLnByb3RvYnVmLlNvdXJjZUNvZGVJbmZvQhPiPxASDnNvdXJjZUNvZGVJb
  mZvUg5zb3VyY2VDb2RlSW5mbxIjCgZzeW50YXgYDCABKAlCC+I/CBIGc3ludGF4UgZzeW50YXgilQgKD0Rlc2NyaXB0b3JQcm90b
  xIdCgRuYW1lGAEgASgJQgniPwYSBG5hbWVSBG5hbWUSRwoFZmllbGQYAiADKAsyJS5nb29nbGUucHJvdG9idWYuRmllbGREZXNjc
  mlwdG9yUHJvdG9CCuI/BxIFZmllbGRSBWZpZWxkElMKCWV4dGVuc2lvbhgGIAMoCzIlLmdvb2dsZS5wcm90b2J1Zi5GaWVsZERlc
  2NyaXB0b3JQcm90b0IO4j8LEglleHRlbnNpb25SCWV4dGVuc2lvbhJSCgtuZXN0ZWRfdHlwZRgDIAMoCzIgLmdvb2dsZS5wcm90b
  2J1Zi5EZXNjcmlwdG9yUHJvdG9CD+I/DBIKbmVzdGVkVHlwZVIKbmVzdGVkVHlwZRJQCgllbnVtX3R5cGUYBCADKAsyJC5nb29nb
  GUucHJvdG9idWYuRW51bURlc2NyaXB0b3JQcm90b0IN4j8KEghlbnVtVHlwZVIIZW51bVR5cGUSbQoPZXh0ZW5zaW9uX3JhbmdlG
  AUgAygLMi8uZ29vZ2xlLnByb3RvYnVmLkRlc2NyaXB0b3JQcm90by5FeHRlbnNpb25SYW5nZUIT4j8QEg5leHRlbnNpb25SYW5nZ
  VIOZXh0ZW5zaW9uUmFuZ2USVAoKb25lb2ZfZGVjbBgIIAMoCzIlLmdvb2dsZS5wcm90b2J1Zi5PbmVvZkRlc2NyaXB0b3JQcm90b
  0IO4j8LEglvbmVvZkRlY2xSCW9uZW9mRGVjbBJHCgdvcHRpb25zGAcgASgLMh8uZ29vZ2xlLnByb3RvYnVmLk1lc3NhZ2VPcHRpb
  25zQgziPwkSB29wdGlvbnNSB29wdGlvbnMSaQoOcmVzZXJ2ZWRfcmFuZ2UYCSADKAsyLi5nb29nbGUucHJvdG9idWYuRGVzY3Jpc
  HRvclByb3RvLlJlc2VydmVkUmFuZ2VCEuI/DxINcmVzZXJ2ZWRSYW5nZVINcmVzZXJ2ZWRSYW5nZRI2Cg1yZXNlcnZlZF9uYW1lG
  AogAygJQhHiPw4SDHJlc2VydmVkTmFtZVIMcmVzZXJ2ZWROYW1lGp4BCg5FeHRlbnNpb25SYW5nZRIgCgVzdGFydBgBIAEoBUIK4
  j8HEgVzdGFydFIFc3RhcnQSGgoDZW5kGAIgASgFQgjiPwUSA2VuZFIDZW5kEk4KB29wdGlvbnMYAyABKAsyJi5nb29nbGUucHJvd
  G9idWYuRXh0ZW5zaW9uUmFuZ2VPcHRpb25zQgziPwkSB29wdGlvbnNSB29wdGlvbnMaTQoNUmVzZXJ2ZWRSYW5nZRIgCgVzdGFyd
  BgBIAEoBUIK4j8HEgVzdGFydFIFc3RhcnQSGgoDZW5kGAIgASgFQgjiPwUSA2VuZFIDZW5kIpYBChVFeHRlbnNpb25SYW5nZU9wd
  GlvbnMScgoUdW5pbnRlcnByZXRlZF9vcHRpb24Y5wcgAygLMiQuZ29vZ2xlLnByb3RvYnVmLlVuaW50ZXJwcmV0ZWRPcHRpb25CG
  OI/FRITdW5pbnRlcnByZXRlZE9wdGlvblITdW5pbnRlcnByZXRlZE9wdGlvbioJCOgHEICAgIACIuYKChRGaWVsZERlc2NyaXB0b
  3JQcm90bxIdCgRuYW1lGAEgASgJQgniPwYSBG5hbWVSBG5hbWUSIwoGbnVtYmVyGAMgASgFQgviPwgSBm51bWJlclIGbnVtYmVyE
  k0KBWxhYmVsGAQgASgOMisuZ29vZ2xlLnByb3RvYnVmLkZpZWxkRGVzY3JpcHRvclByb3RvLkxhYmVsQgriPwcSBWxhYmVsUgVsY
  WJlbBJJCgR0eXBlGAUgASgOMiouZ29vZ2xlLnByb3RvYnVmLkZpZWxkRGVzY3JpcHRvclByb3RvLlR5cGVCCeI/BhIEdHlwZVIEd
  HlwZRIqCgl0eXBlX25hbWUYBiABKAlCDeI/ChIIdHlwZU5hbWVSCHR5cGVOYW1lEikKCGV4dGVuZGVlGAIgASgJQg3iPwoSCGV4d
  GVuZGVlUghleHRlbmRlZRI2Cg1kZWZhdWx0X3ZhbHVlGAcgASgJQhHiPw4SDGRlZmF1bHRWYWx1ZVIMZGVmYXVsdFZhbHVlEjAKC
  29uZW9mX2luZGV4GAkgASgFQg/iPwwSCm9uZW9mSW5kZXhSCm9uZW9mSW5kZXgSKgoJanNvbl9uYW1lGAogASgJQg3iPwoSCGpzb
  25OYW1lUghqc29uTmFtZRJFCgdvcHRpb25zGAggASgLMh0uZ29vZ2xlLnByb3RvYnVmLkZpZWxkT3B0aW9uc0IM4j8JEgdvcHRpb
  25zUgdvcHRpb25zEjwKD3Byb3RvM19vcHRpb25hbBgRIAEoCEIT4j8QEg5wcm90bzNPcHRpb25hbFIOcHJvdG8zT3B0aW9uYWwi+
  AQKBFR5cGUSIQoLVFlQRV9ET1VCTEUQARoQ4j8NEgtUWVBFX0RPVUJMRRIfCgpUWVBFX0ZMT0FUEAIaD+I/DBIKVFlQRV9GTE9BV
  BIfCgpUWVBFX0lOVDY0EAMaD+I/DBIKVFlQRV9JTlQ2NBIhCgtUWVBFX1VJTlQ2NBAEGhDiPw0SC1RZUEVfVUlOVDY0Eh8KClRZU
  EVfSU5UMzIQBRoP4j8MEgpUWVBFX0lOVDMyEiMKDFRZUEVfRklYRUQ2NBAGGhHiPw4SDFRZUEVfRklYRUQ2NBIjCgxUWVBFX0ZJW
  EVEMzIQBxoR4j8OEgxUWVBFX0ZJWEVEMzISHQoJVFlQRV9CT09MEAgaDuI/CxIJVFlQRV9CT09MEiEKC1RZUEVfU1RSSU5HEAkaE
  OI/DRILVFlQRV9TVFJJTkcSHwoKVFlQRV9HUk9VUBAKGg/iPwwSClRZUEVfR1JPVVASIwoMVFlQRV9NRVNTQUdFEAsaEeI/DhIMV
  FlQRV9NRVNTQUdFEh8KClRZUEVfQllURVMQDBoP4j8MEgpUWVBFX0JZVEVTEiEKC1RZUEVfVUlOVDMyEA0aEOI/DRILVFlQRV9VS
  U5UMzISHQoJVFlQRV9FTlVNEA4aDuI/CxIJVFlQRV9FTlVNEiUKDVRZUEVfU0ZJWEVEMzIQDxoS4j8PEg1UWVBFX1NGSVhFRDMyE
  iUKDVRZUEVfU0ZJWEVENjQQEBoS4j8PEg1UWVBFX1NGSVhFRDY0EiEKC1RZUEVfU0lOVDMyEBEaEOI/DRILVFlQRV9TSU5UMzISI
  QoLVFlQRV9TSU5UNjQQEhoQ4j8NEgtUWVBFX1NJTlQ2NCKCAQoFTGFiZWwSJwoOTEFCRUxfT1BUSU9OQUwQARoT4j8QEg5MQUJFT
  F9PUFRJT05BTBInCg5MQUJFTF9SRVFVSVJFRBACGhPiPxASDkxBQkVMX1JFUVVJUkVEEicKDkxBQkVMX1JFUEVBVEVEEAMaE+I/E
  BIOTEFCRUxfUkVQRUFURUQifAoUT25lb2ZEZXNjcmlwdG9yUHJvdG8SHQoEbmFtZRgBIAEoCUIJ4j8GEgRuYW1lUgRuYW1lEkUKB
  29wdGlvbnMYAiABKAsyHS5nb29nbGUucHJvdG9idWYuT25lb2ZPcHRpb25zQgziPwkSB29wdGlvbnNSB29wdGlvbnMixQMKE0Vud
  W1EZXNjcmlwdG9yUHJvdG8SHQoEbmFtZRgBIAEoCUIJ4j8GEgRuYW1lUgRuYW1lEksKBXZhbHVlGAIgAygLMikuZ29vZ2xlLnByb
  3RvYnVmLkVudW1WYWx1ZURlc2NyaXB0b3JQcm90b0IK4j8HEgV2YWx1ZVIFdmFsdWUSRAoHb3B0aW9ucxgDIAEoCzIcLmdvb2dsZ
  S5wcm90b2J1Zi5FbnVtT3B0aW9uc0IM4j8JEgdvcHRpb25zUgdvcHRpb25zEnEKDnJlc2VydmVkX3JhbmdlGAQgAygLMjYuZ29vZ
  2xlLnByb3RvYnVmLkVudW1EZXNjcmlwdG9yUHJvdG8uRW51bVJlc2VydmVkUmFuZ2VCEuI/DxINcmVzZXJ2ZWRSYW5nZVINcmVzZ
  XJ2ZWRSYW5nZRI2Cg1yZXNlcnZlZF9uYW1lGAUgAygJQhHiPw4SDHJlc2VydmVkTmFtZVIMcmVzZXJ2ZWROYW1lGlEKEUVudW1SZ
  XNlcnZlZFJhbmdlEiAKBXN0YXJ0GAEgASgFQgriPwcSBXN0YXJ0UgVzdGFydBIaCgNlbmQYAiABKAVCCOI/BRIDZW5kUgNlbmQiq
  QEKGEVudW1WYWx1ZURlc2NyaXB0b3JQcm90bxIdCgRuYW1lGAEgASgJQgniPwYSBG5hbWVSBG5hbWUSIwoGbnVtYmVyGAIgASgFQ
  gviPwgSBm51bWJlclIGbnVtYmVyEkkKB29wdGlvbnMYAyABKAsyIS5nb29nbGUucHJvdG9idWYuRW51bVZhbHVlT3B0aW9uc0IM4
  j8JEgdvcHRpb25zUgdvcHRpb25zIs0BChZTZXJ2aWNlRGVzY3JpcHRvclByb3RvEh0KBG5hbWUYASABKAlCCeI/BhIEbmFtZVIEb
  mFtZRJLCgZtZXRob2QYAiADKAsyJi5nb29nbGUucHJvdG9idWYuTWV0aG9kRGVzY3JpcHRvclByb3RvQgviPwgSBm1ldGhvZFIGb
  WV0aG9kEkcKB29wdGlvbnMYAyABKAsyHy5nb29nbGUucHJvdG9idWYuU2VydmljZU9wdGlvbnNCDOI/CRIHb3B0aW9uc1IHb3B0a
  W9ucyLvAgoVTWV0aG9kRGVzY3JpcHRvclByb3RvEh0KBG5hbWUYASABKAlCCeI/BhIEbmFtZVIEbmFtZRItCgppbnB1dF90eXBlG
  AIgASgJQg7iPwsSCWlucHV0VHlwZVIJaW5wdXRUeXBlEjAKC291dHB1dF90eXBlGAMgASgJQg/iPwwSCm91dHB1dFR5cGVSCm91d
  HB1dFR5cGUSRgoHb3B0aW9ucxgEIAEoCzIeLmdvb2dsZS5wcm90b2J1Zi5NZXRob2RPcHRpb25zQgziPwkSB29wdGlvbnNSB29wd
  GlvbnMSRgoQY2xpZW50X3N0cmVhbWluZxgFIAEoCDoFZmFsc2VCFOI/ERIPY2xpZW50U3RyZWFtaW5nUg9jbGllbnRTdHJlYW1pb
  mcSRgoQc2VydmVyX3N0cmVhbWluZxgGIAEoCDoFZmFsc2VCFOI/ERIPc2VydmVyU3RyZWFtaW5nUg9zZXJ2ZXJTdHJlYW1pbmcik
  w0KC0ZpbGVPcHRpb25zEjMKDGphdmFfcGFja2FnZRgBIAEoCUIQ4j8NEgtqYXZhUGFja2FnZVILamF2YVBhY2thZ2USSQoUamF2Y
  V9vdXRlcl9jbGFzc25hbWUYCCABKAlCF+I/FBISamF2YU91dGVyQ2xhc3NuYW1lUhJqYXZhT3V0ZXJDbGFzc25hbWUSTQoTamF2Y
  V9tdWx0aXBsZV9maWxlcxgKIAEoCDoFZmFsc2VCFuI/ExIRamF2YU11bHRpcGxlRmlsZXNSEWphdmFNdWx0aXBsZUZpbGVzEmIKH
  WphdmFfZ2VuZXJhdGVfZXF1YWxzX2FuZF9oYXNoGBQgASgIQiAYAeI/GxIZamF2YUdlbmVyYXRlRXF1YWxzQW5kSGFzaFIZamF2Y
  UdlbmVyYXRlRXF1YWxzQW5kSGFzaBJUChZqYXZhX3N0cmluZ19jaGVja191dGY4GBsgASgIOgVmYWxzZUIY4j8VEhNqYXZhU3Rya
  W5nQ2hlY2tVdGY4UhNqYXZhU3RyaW5nQ2hlY2tVdGY4EmUKDG9wdGltaXplX2ZvchgJIAEoDjIpLmdvb2dsZS5wcm90b2J1Zi5Ga
  WxlT3B0aW9ucy5PcHRpbWl6ZU1vZGU6BVNQRUVEQhDiPw0SC29wdGltaXplRm9yUgtvcHRpbWl6ZUZvchItCgpnb19wYWNrYWdlG
  AsgASgJQg7iPwsSCWdvUGFja2FnZVIJZ29QYWNrYWdlEk0KE2NjX2dlbmVyaWNfc2VydmljZXMYECABKAg6BWZhbHNlQhbiPxMSE
  WNjR2VuZXJpY1NlcnZpY2VzUhFjY0dlbmVyaWNTZXJ2aWNlcxJTChVqYXZhX2dlbmVyaWNfc2VydmljZXMYESABKAg6BWZhbHNlQ
  hjiPxUSE2phdmFHZW5lcmljU2VydmljZXNSE2phdmFHZW5lcmljU2VydmljZXMSTQoTcHlfZ2VuZXJpY19zZXJ2aWNlcxgSIAEoC
  DoFZmFsc2VCFuI/ExIRcHlHZW5lcmljU2VydmljZXNSEXB5R2VuZXJpY1NlcnZpY2VzElAKFHBocF9nZW5lcmljX3NlcnZpY2VzG
  CogASgIOgVmYWxzZUIX4j8UEhJwaHBHZW5lcmljU2VydmljZXNSEnBocEdlbmVyaWNTZXJ2aWNlcxI2CgpkZXByZWNhdGVkGBcgA
  SgIOgVmYWxzZUIP4j8MEgpkZXByZWNhdGVkUgpkZXByZWNhdGVkEkMKEGNjX2VuYWJsZV9hcmVuYXMYHyABKAg6BHRydWVCE+I/E
  BIOY2NFbmFibGVBcmVuYXNSDmNjRW5hYmxlQXJlbmFzEkAKEW9iamNfY2xhc3NfcHJlZml4GCQgASgJQhTiPxESD29iamNDbGFzc
  1ByZWZpeFIPb2JqY0NsYXNzUHJlZml4Ej8KEGNzaGFycF9uYW1lc3BhY2UYJSABKAlCFOI/ERIPY3NoYXJwTmFtZXNwYWNlUg9jc
  2hhcnBOYW1lc3BhY2USMwoMc3dpZnRfcHJlZml4GCcgASgJQhDiPw0SC3N3aWZ0UHJlZml4Ugtzd2lmdFByZWZpeBI9ChBwaHBfY
  2xhc3NfcHJlZml4GCggASgJQhPiPxASDnBocENsYXNzUHJlZml4Ug5waHBDbGFzc1ByZWZpeBI2Cg1waHBfbmFtZXNwYWNlGCkgA
  SgJQhHiPw4SDHBocE5hbWVzcGFjZVIMcGhwTmFtZXNwYWNlEk8KFnBocF9tZXRhZGF0YV9uYW1lc3BhY2UYLCABKAlCGeI/FhIUc
  GhwTWV0YWRhdGFOYW1lc3BhY2VSFHBocE1ldGFkYXRhTmFtZXNwYWNlEjMKDHJ1YnlfcGFja2FnZRgtIAEoCUIQ4j8NEgtydWJ5U
  GFja2FnZVILcnVieVBhY2thZ2UScgoUdW5pbnRlcnByZXRlZF9vcHRpb24Y5wcgAygLMiQuZ29vZ2xlLnByb3RvYnVmLlVuaW50Z
  XJwcmV0ZWRPcHRpb25CGOI/FRITdW5pbnRlcnByZXRlZE9wdGlvblITdW5pbnRlcnByZXRlZE9wdGlvbiJpCgxPcHRpbWl6ZU1vZ
  GUSFQoFU1BFRUQQARoK4j8HEgVTUEVFRBIdCglDT0RFX1NJWkUQAhoO4j8LEglDT0RFX1NJWkUSIwoMTElURV9SVU5USU1FEAMaE
  eI/DhIMTElURV9SVU5USU1FKgkI6AcQgICAgAJKBAgmECciyQMKDk1lc3NhZ2VPcHRpb25zElcKF21lc3NhZ2Vfc2V0X3dpcmVfZ
  m9ybWF0GAEgASgIOgVmYWxzZUIZ4j8WEhRtZXNzYWdlU2V0V2lyZUZvcm1hdFIUbWVzc2FnZVNldFdpcmVGb3JtYXQSbwofbm9fc
  3RhbmRhcmRfZGVzY3JpcHRvcl9hY2Nlc3NvchgCIAEoCDoFZmFsc2VCIeI/HhIcbm9TdGFuZGFyZERlc2NyaXB0b3JBY2Nlc3Nvc
  lIcbm9TdGFuZGFyZERlc2NyaXB0b3JBY2Nlc3NvchI2CgpkZXByZWNhdGVkGAMgASgIOgVmYWxzZUIP4j8MEgpkZXByZWNhdGVkU
  gpkZXByZWNhdGVkEioKCW1hcF9lbnRyeRgHIAEoCEIN4j8KEghtYXBFbnRyeVIIbWFwRW50cnkScgoUdW5pbnRlcnByZXRlZF9vc
  HRpb24Y5wcgAygLMiQuZ29vZ2xlLnByb3RvYnVmLlVuaW50ZXJwcmV0ZWRPcHRpb25CGOI/FRITdW5pbnRlcnByZXRlZE9wdGlvb
  lITdW5pbnRlcnByZXRlZE9wdGlvbioJCOgHEICAgIACSgQICBAJSgQICRAKIqQFCgxGaWVsZE9wdGlvbnMSTQoFY3R5cGUYASABK
  A4yIy5nb29nbGUucHJvdG9idWYuRmllbGRPcHRpb25zLkNUeXBlOgZTVFJJTkdCCuI/BxIFY3R5cGVSBWN0eXBlEiMKBnBhY2tlZ
  BgCIAEoCEIL4j8IEgZwYWNrZWRSBnBhY2tlZBJUCgZqc3R5cGUYBiABKA4yJC5nb29nbGUucHJvdG9idWYuRmllbGRPcHRpb25zL
  kpTVHlwZToJSlNfTk9STUFMQgviPwgSBmpzdHlwZVIGanN0eXBlEiQKBGxhenkYBSABKAg6BWZhbHNlQgniPwYSBGxhenlSBGxhe
  nkSNgoKZGVwcmVjYXRlZBgDIAEoCDoFZmFsc2VCD+I/DBIKZGVwcmVjYXRlZFIKZGVwcmVjYXRlZBIkCgR3ZWFrGAogASgIOgVmY
  WxzZUIJ4j8GEgR3ZWFrUgR3ZWFrEnIKFHVuaW50ZXJwcmV0ZWRfb3B0aW9uGOcHIAMoCzIkLmdvb2dsZS5wcm90b2J1Zi5Vbmlud
  GVycHJldGVkT3B0aW9uQhjiPxUSE3VuaW50ZXJwcmV0ZWRPcHRpb25SE3VuaW50ZXJwcmV0ZWRPcHRpb24iWgoFQ1R5cGUSFwoGU
  1RSSU5HEAAaC+I/CBIGU1RSSU5HEhMKBENPUkQQARoJ4j8GEgRDT1JEEiMKDFNUUklOR19QSUVDRRACGhHiPw4SDFNUUklOR19QS
  UVDRSJlCgZKU1R5cGUSHQoJSlNfTk9STUFMEAAaDuI/CxIJSlNfTk9STUFMEh0KCUpTX1NUUklORxABGg7iPwsSCUpTX1NUUklOR
  xIdCglKU19OVU1CRVIQAhoO4j8LEglKU19OVU1CRVIqCQjoBxCAgICAAkoECAQQBSKNAQoMT25lb2ZPcHRpb25zEnIKFHVuaW50Z
  XJwcmV0ZWRfb3B0aW9uGOcHIAMoCzIkLmdvb2dsZS5wcm90b2J1Zi5VbmludGVycHJldGVkT3B0aW9uQhjiPxUSE3VuaW50ZXJwc
  mV0ZWRPcHRpb25SE3VuaW50ZXJwcmV0ZWRPcHRpb24qCQjoBxCAgICAAiL8AQoLRW51bU9wdGlvbnMSMAoLYWxsb3dfYWxpYXMYA
  iABKAhCD+I/DBIKYWxsb3dBbGlhc1IKYWxsb3dBbGlhcxI2CgpkZXByZWNhdGVkGAMgASgIOgVmYWxzZUIP4j8MEgpkZXByZWNhd
  GVkUgpkZXByZWNhdGVkEnIKFHVuaW50ZXJwcmV0ZWRfb3B0aW9uGOcHIAMoCzIkLmdvb2dsZS5wcm90b2J1Zi5VbmludGVycHJld
  GVkT3B0aW9uQhjiPxUSE3VuaW50ZXJwcmV0ZWRPcHRpb25SE3VuaW50ZXJwcmV0ZWRPcHRpb24qCQjoBxCAgICAAkoECAUQBiLJA
  QoQRW51bVZhbHVlT3B0aW9ucxI2CgpkZXByZWNhdGVkGAEgASgIOgVmYWxzZUIP4j8MEgpkZXByZWNhdGVkUgpkZXByZWNhdGVkE
  nIKFHVuaW50ZXJwcmV0ZWRfb3B0aW9uGOcHIAMoCzIkLmdvb2dsZS5wcm90b2J1Zi5VbmludGVycHJldGVkT3B0aW9uQhjiPxUSE
  3VuaW50ZXJwcmV0ZWRPcHRpb25SE3VuaW50ZXJwcmV0ZWRPcHRpb24qCQjoBxCAgICAAiLHAQoOU2VydmljZU9wdGlvbnMSNgoKZ
  GVwcmVjYXRlZBghIAEoCDoFZmFsc2VCD+I/DBIKZGVwcmVjYXRlZFIKZGVwcmVjYXRlZBJyChR1bmludGVycHJldGVkX29wdGlvb
  hjnByADKAsyJC5nb29nbGUucHJvdG9idWYuVW5pbnRlcnByZXRlZE9wdGlvbkIY4j8VEhN1bmludGVycHJldGVkT3B0aW9uUhN1b
  mludGVycHJldGVkT3B0aW9uKgkI6AcQgICAgAIi5QMKDU1ldGhvZE9wdGlvbnMSNgoKZGVwcmVjYXRlZBghIAEoCDoFZmFsc2VCD
  +I/DBIKZGVwcmVjYXRlZFIKZGVwcmVjYXRlZBKIAQoRaWRlbXBvdGVuY3lfbGV2ZWwYIiABKA4yLy5nb29nbGUucHJvdG9idWYuT
  WV0aG9kT3B0aW9ucy5JZGVtcG90ZW5jeUxldmVsOhNJREVNUE9URU5DWV9VTktOT1dOQhXiPxISEGlkZW1wb3RlbmN5TGV2ZWxSE
  GlkZW1wb3RlbmN5TGV2ZWwScgoUdW5pbnRlcnByZXRlZF9vcHRpb24Y5wcgAygLMiQuZ29vZ2xlLnByb3RvYnVmLlVuaW50ZXJwc
  mV0ZWRPcHRpb25CGOI/FRITdW5pbnRlcnByZXRlZE9wdGlvblITdW5pbnRlcnByZXRlZE9wdGlvbiKRAQoQSWRlbXBvdGVuY3lMZ
  XZlbBIxChNJREVNUE9URU5DWV9VTktOT1dOEAAaGOI/FRITSURFTVBPVEVOQ1lfVU5LTk9XThIpCg9OT19TSURFX0VGRkVDVFMQA
  RoU4j8REg9OT19TSURFX0VGRkVDVFMSHwoKSURFTVBPVEVOVBACGg/iPwwSCklERU1QT1RFTlQqCQjoBxCAgICAAiLDBAoTVW5pb
  nRlcnByZXRlZE9wdGlvbhJMCgRuYW1lGAIgAygLMi0uZ29vZ2xlLnByb3RvYnVmLlVuaW50ZXJwcmV0ZWRPcHRpb24uTmFtZVBhc
  nRCCeI/BhIEbmFtZVIEbmFtZRI/ChBpZGVudGlmaWVyX3ZhbHVlGAMgASgJQhTiPxESD2lkZW50aWZpZXJWYWx1ZVIPaWRlbnRpZ
  mllclZhbHVlEkMKEnBvc2l0aXZlX2ludF92YWx1ZRgEIAEoBEIV4j8SEhBwb3NpdGl2ZUludFZhbHVlUhBwb3NpdGl2ZUludFZhb
  HVlEkMKEm5lZ2F0aXZlX2ludF92YWx1ZRgFIAEoA0IV4j8SEhBuZWdhdGl2ZUludFZhbHVlUhBuZWdhdGl2ZUludFZhbHVlEjMKD
  GRvdWJsZV92YWx1ZRgGIAEoAUIQ4j8NEgtkb3VibGVWYWx1ZVILZG91YmxlVmFsdWUSMwoMc3RyaW5nX3ZhbHVlGAcgASgMQhDiP
  w0SC3N0cmluZ1ZhbHVlUgtzdHJpbmdWYWx1ZRI8Cg9hZ2dyZWdhdGVfdmFsdWUYCCABKAlCE+I/EBIOYWdncmVnYXRlVmFsdWVSD
  mFnZ3JlZ2F0ZVZhbHVlGmsKCE5hbWVQYXJ0EioKCW5hbWVfcGFydBgBIAIoCUIN4j8KEghuYW1lUGFydFIIbmFtZVBhcnQSMwoMa
  XNfZXh0ZW5zaW9uGAIgAigIQhDiPw0SC2lzRXh0ZW5zaW9uUgtpc0V4dGVuc2lvbiKTAwoOU291cmNlQ29kZUluZm8SUwoIbG9jY
  XRpb24YASADKAsyKC5nb29nbGUucHJvdG9idWYuU291cmNlQ29kZUluZm8uTG9jYXRpb25CDeI/ChIIbG9jYXRpb25SCGxvY2F0a
  W9uGqsCCghMb2NhdGlvbhIfCgRwYXRoGAEgAygFQgsQAeI/BhIEcGF0aFIEcGF0aBIfCgRzcGFuGAIgAygFQgsQAeI/BhIEc3Bhb
  lIEc3BhbhI/ChBsZWFkaW5nX2NvbW1lbnRzGAMgASgJQhTiPxESD2xlYWRpbmdDb21tZW50c1IPbGVhZGluZ0NvbW1lbnRzEkIKE
  XRyYWlsaW5nX2NvbW1lbnRzGAQgASgJQhXiPxISEHRyYWlsaW5nQ29tbWVudHNSEHRyYWlsaW5nQ29tbWVudHMSWAoZbGVhZGluZ
  19kZXRhY2hlZF9jb21tZW50cxgGIAMoCUIc4j8ZEhdsZWFkaW5nRGV0YWNoZWRDb21tZW50c1IXbGVhZGluZ0RldGFjaGVkQ29tb
  WVudHMikwIKEUdlbmVyYXRlZENvZGVJbmZvEl4KCmFubm90YXRpb24YASADKAsyLS5nb29nbGUucHJvdG9idWYuR2VuZXJhdGVkQ
  29kZUluZm8uQW5ub3RhdGlvbkIP4j8MEgphbm5vdGF0aW9uUgphbm5vdGF0aW9uGp0BCgpBbm5vdGF0aW9uEh8KBHBhdGgYASADK
  AVCCxAB4j8GEgRwYXRoUgRwYXRoEjAKC3NvdXJjZV9maWxlGAIgASgJQg/iPwwSCnNvdXJjZUZpbGVSCnNvdXJjZUZpbGUSIAoFY
  mVnaW4YAyABKAVCCuI/BxIFYmVnaW5SBWJlZ2luEhoKA2VuZBgEIAEoBUII4j8FEgNlbmRSA2VuZEKPAQoTY29tLmdvb2dsZS5wc
  m90b2J1ZkIQRGVzY3JpcHRvclByb3Rvc0gBWj5naXRodWIuY29tL2dvbGFuZy9wcm90b2J1Zi9wcm90b2MtZ2VuLWdvL2Rlc2Nya
  XB0b3I7ZGVzY3JpcHRvcvgBAaICA0dQQqoCGkdvb2dsZS5Qcm90b2J1Zi5SZWZsZWN0aW9u"""
      ).mkString)
  lazy val scalaDescriptor: _root_.scalapb.descriptors.FileDescriptor = {
    val scalaProto = com.google.protobuf.descriptor.FileDescriptorProto.parseFrom(ProtoBytes)
    _root_.scalapb.descriptors.FileDescriptor.buildFrom(scalaProto, dependencies.map(_.scalaDescriptor))
  }
  lazy val javaDescriptor: com.google.protobuf.Descriptors.FileDescriptor =
    com.google.protobuf.DescriptorProtos.getDescriptor()
  @deprecated("Use javaDescriptor instead. In a future version this will refer to scalaDescriptor.", "ScalaPB 0.5.47")
  def descriptor: com.google.protobuf.Descriptors.FileDescriptor = javaDescriptor
}