// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!

package com.google.protobuf.descriptor

/** Describes the 'visibility' of a symbol with respect to the proto import
  * system. Symbols can only be imported when the visibility rules do not prevent
  * it (ex: local symbols cannot be imported).  Visibility modifiers can only set
  * on `message` and `enum` as they are the only types available to be referenced
  * from other files.
  */
sealed abstract class SymbolVisibility(val value: _root_.scala.Int) extends _root_.scalapb.GeneratedEnum {
  type EnumType = com.google.protobuf.descriptor.SymbolVisibility
  type RecognizedType = com.google.protobuf.descriptor.SymbolVisibility.Recognized
  def isVisibilityUnset: _root_.scala.Boolean = false
  def isVisibilityLocal: _root_.scala.Boolean = false
  def isVisibilityExport: _root_.scala.Boolean = false
  def companion: _root_.scalapb.GeneratedEnumCompanion[SymbolVisibility] = com.google.protobuf.descriptor.SymbolVisibility
  final def asRecognized: _root_.scala.Option[com.google.protobuf.descriptor.SymbolVisibility.Recognized] = if (isUnrecognized) _root_.scala.None else _root_.scala.Some(this.asInstanceOf[com.google.protobuf.descriptor.SymbolVisibility.Recognized])
}

object SymbolVisibility extends _root_.scalapb.GeneratedEnumCompanion[SymbolVisibility] {
  sealed trait Recognized extends SymbolVisibility
  implicit def enumCompanion: _root_.scalapb.GeneratedEnumCompanion[SymbolVisibility] = this
  
  @SerialVersionUID(0L)
  case object VISIBILITY_UNSET extends SymbolVisibility(0) with SymbolVisibility.Recognized {
    val index = 0
    val name = "VISIBILITY_UNSET"
    override def isVisibilityUnset: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object VISIBILITY_LOCAL extends SymbolVisibility(1) with SymbolVisibility.Recognized {
    val index = 1
    val name = "VISIBILITY_LOCAL"
    override def isVisibilityLocal: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  case object VISIBILITY_EXPORT extends SymbolVisibility(2) with SymbolVisibility.Recognized {
    val index = 2
    val name = "VISIBILITY_EXPORT"
    override def isVisibilityExport: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  final case class Unrecognized(unrecognizedValue: _root_.scala.Int) extends SymbolVisibility(unrecognizedValue) with _root_.scalapb.UnrecognizedEnum
  lazy val values: scala.collection.immutable.Seq[ValueType] = scala.collection.immutable.Seq(VISIBILITY_UNSET, VISIBILITY_LOCAL, VISIBILITY_EXPORT)
  def fromValue(__value: _root_.scala.Int): SymbolVisibility = __value match {
    case 0 => VISIBILITY_UNSET
    case 1 => VISIBILITY_LOCAL
    case 2 => VISIBILITY_EXPORT
    case __other => Unrecognized(__other)
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.EnumDescriptor = com.google.protobuf.descriptor.DescriptorProtoCompanion.javaDescriptor.getEnumTypes().get(1)
  def scalaDescriptor: _root_.scalapb.descriptors.EnumDescriptor = com.google.protobuf.descriptor.DescriptorProtoCompanion.scalaDescriptor.enums(1)
}